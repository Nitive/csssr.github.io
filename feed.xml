<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSSSR</title>
    <description>CSSSR — веб-студия по фронтенд-разработке. HTML, CSS, JavaScript.</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>CSSSR Garbage Collector #17</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/share/cgc-cover-17.jpg&quot; alt=&quot;CSSSR Garbage Collector&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Еженедельная подборка ссылок из чатов CSSSR на интересные материалы.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Продолжаем публиковать доклады с нашей конференции. На этот раз &lt;a href=&quot;https://github.com/typeetfunc&quot;&gt;Мельников Андрей&lt;/a&gt; расскажет, &lt;a href=&quot;https://youtu.be/yckjMWTuLSg&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; как системы типов лишат вас работы&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=HRlSn8qqD-M&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; Запись всех докладов с WSD в Киеве&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://blog.angular.io/version-5-0-0-of-angular-now-available-37e414935ced&quot;&gt;Состоялся релиз пятой версии Angular&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/styleguidist/react-styleguidist&quot;&gt;&lt;img src=&quot;/images/icons/github.png&quot; alt=&quot;github&quot; /&gt; Интересная альтернатива Storybook с возможностями markdown документации&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Компания Apple предложила &lt;a href=&quot;https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Template-Instantiation.md&quot;&gt;&lt;img src=&quot;/images/icons/github.png&quot; alt=&quot;github&quot; /&gt; HTML-шаблонизацию&lt;/a&gt; в теге &lt;code class=&quot;highlighter-rouge&quot;&gt;template&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.it-agency.ru/academy/jedi-plan/&quot;&gt;План обучения джедаев&lt;/a&gt;. Этим всё сказано&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://flexport.engineering/ending-the-debate-on-inline-functions-in-react-8c03fabd144&quot;&gt;&lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; Прекращаем спорить об инлайновых функциях в React&lt;/a&gt; — третья статья из &lt;a href=&quot;https://flexport.engineering/@dounanshi&quot;&gt;серии&lt;/a&gt; об оптимизации рендеринга в React&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vasily.polovnyov.ru/posts/test-smells-ru.html&quot;&gt;Анти-паттерны в тестах&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mathnet.ru/php/presentation.phtml?presentid=18230&quot;&gt;Соответствие Карри – Ховарда: от математической логики к программированию&lt;/a&gt; — видеокурс от уже известного нам В. Н. Брагилевского&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;http://exercism.io/languages/idris/exercises&quot;&gt;Уроки по Idris&lt;/a&gt; от &lt;a href=&quot;http://exercism.io/&quot;&gt;Exercism&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Вадим Макеев в гостях у LoftBlog рассказывает, &lt;a href=&quot;https://www.youtube.com/watch?v=O9o_KAchp9g&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; как учиться веб-разработке&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 08 Nov 2017 00:00:00 +0000</pubDate>
        <link>/2017/11/08/cgc-17</link>
        <guid isPermaLink="true">/2017/11/08/cgc-17</guid>
      </item>
    
      <item>
        <title>CSSSR Garbage Collector #16</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/share/cgc-cover-16.jpg&quot; alt=&quot;CSSSR Garbage Collector&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Еженедельная подборка ссылок из чатов CSSSR на интересные материалы.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Наш комрад &lt;a href=&quot;https://github.com/Laiff&quot;&gt;Андрей&lt;/a&gt; рассказывает и размышляет о &lt;a href=&quot;https://www.youtube.com/watch?v=y_C3rMFTSeg&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; шаблонизации проектов&lt;/a&gt;. А в результате мы создали &lt;a href=&quot;https://rispa.io/&quot;&gt;Rispa&lt;/a&gt; — простой и мощный инструмент для управления и шаблонизации веб-приложений на ReactJS через командную строку&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bakhirev.biz/book/&quot;&gt;Сюрреализм на JavaScript&lt;/a&gt; — интересная книга о том, как создавать игры на JavaScript&lt;/li&gt;
  &lt;li&gt;Широко известный в узких кругах Брагилевский с 21 ноября по 1 декабря в Москве проведёт &lt;a href=&quot;https://cs.hse.ru/announcements/210992029.html&quot;&gt;курс по идрису и зависимым типам&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Если кто-то хочет разобраться в блокчейне, но не может найти понятную статью, мы рекомендуем вот эти:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://vas3k.ru/blog/blockchain/&quot;&gt;Блокчейн изнутри: как устроен биткоин&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://vas3k.ru/blog/ethereum/&quot;&gt;Как устроен Ethereum и смарт-контракты&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://blog.racket-lang.org/2017/10/racket-v6-11.html&quot;&gt;Зависимые типы и рефаймент-типы в Racket&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Небольшая книжечка, объясняющая, &lt;a href=&quot;http://camlunity.ru/swap/haskell/whyhaskell.pdf&quot;&gt;почему Haskell — хороший, годный язык программирования&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
        <link>/2017/11/01/cgc-16</link>
        <guid isPermaLink="true">/2017/11/01/cgc-16</guid>
      </item>
    
      <item>
        <title>CSSSR Garbage Collector #15</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/share/cgc-cover-15.jpg&quot; alt=&quot;CSSSR Garbage Collector&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Еженедельная подборка ссылок из чатов CSSSR на интересные материалы.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Наш комрад &lt;a href=&quot;https://github.com/myfailemtions&quot;&gt;Арарат&lt;/a&gt; попробовал в Vue + Vuex и написал небольшой редактор для создания документации &lt;a href=&quot;https://github.com/RUInCodeWeTrust/InDocsWeTrust&quot;&gt;&lt;img src=&quot;/images/icons/github.png&quot; alt=&quot;github&quot; /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;InDocsWeTrust&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;CSSSR Shorts:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=4u914WNbo1o&amp;amp;index=20&amp;amp;list=PLLtDv0NfxtZxP4kESksdaHyN3ss4nsONz&amp;amp;t=20s&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; №20: Вложенные структуры данных в reduxForm&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=H-xNIxJSzOc&amp;amp;list=PLLtDv0NfxtZxP4kESksdaHyN3ss4nsONz&amp;amp;index=21&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; №21: Как изменить значение Field из формы&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=xyZiaz5WBXU&amp;amp;list=PLLtDv0NfxtZxP4kESksdaHyN3ss4nsONz&amp;amp;index=22&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; №22: Изменение нескольких полей одной функцией&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=qhhYyZfBArI&amp;amp;list=PLLtDv0NfxtZxP4kESksdaHyN3ss4nsONz&amp;amp;index=23&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; №23: Заставляем reduxForm слушать хранилище для initialValues&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCBVZa_qgKhT8_MMqvR0bNQA/videos&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; Доклады с Krasnodar Dev Days #2&lt;/a&gt; таки залили, смотрим и наслаждаемся&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=2fgYmEtTCPs&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; Порочный круг: почему разработчики сами виноваты в дефиците кадров&lt;/a&gt; — доклад Владислава Козули&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://youtu.be/7-XnEMrQnn4&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; Будущие фичи ChromeDevTools (это прекрасно)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Интересно, как работают фреймы в браузере и достигаются 60fps? Тогда вам &lt;a href=&quot;https://habrahabr.ru/post/340176/&quot;&gt;сюда&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/TypeScript/issues/16392&quot;&gt;&lt;img src=&quot;/images/icons/github.png&quot; alt=&quot;github&quot; /&gt; Шикарная ишью с ссылками на крутые около-тайплевел хаки&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Немного о доступности:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://weblind.ru/&quot;&gt;Weblind&lt;/a&gt; — сайт с рекомендациями по разработке сайтов для людей с нарушениями зрения&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://khan.github.io/tota11y/&quot;&gt;tota11y&lt;/a&gt; — инструмент для проверки доступности ваших продуктов&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itvdn.com/ru/shares/reactjs_free?utm_source=yb_action_rjsfree&quot;&gt;Бесплатный курс по React’у от ITVDN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rxviz.com/&quot;&gt;Визуализация RxJS Observable 🔥&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate>
        <link>/2017/10/25/cgc-15</link>
        <guid isPermaLink="true">/2017/10/25/cgc-15</guid>
      </item>
    
      <item>
        <title>CSSSR Garbage Collector #14</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/share/cgc-cover-14.jpg&quot; alt=&quot;CSSSR Garbage Collector&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Еженедельная подборка ссылок из чатов CSSSR на интересные материалы.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CSSSR Shorts:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://youtu.be/wlXWYztWdUE?list=PLLtDv0NfxtZxP4kESksdaHyN3ss4nsONz&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; №16: Redux-form минимальный вариант использования&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://youtu.be/IwN60s1i4QY?list=PLLtDv0NfxtZxP4kESksdaHyN3ss4nsONz&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; №17: Маски в Field reduxForm через normalize&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://youtu.be/_4jTtD7UyH0?list=PLLtDv0NfxtZxP4kESksdaHyN3ss4nsONz&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; №18: Собственные компоненты ввода для reduxForm&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://youtu.be/sS_vafrVJ8s?list=PLLtDv0NfxtZxP4kESksdaHyN3ss4nsONz&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; №19: Что будет, если забыть type у button внутри формы&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Вспоминаем про релиз второй версии &lt;a href=&quot;https://github.com/facebook/react-vr/releases/tag/v2.0.0&quot;&gt;&lt;img src=&quot;/images/icons/github.png&quot; alt=&quot;github&quot; /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;react-vr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;И не забываем про обновление 4.1.0 для &lt;a href=&quot;https://github.com/redux-loop/redux-loop/releases/tag/v4.1.0&quot;&gt;&lt;img src=&quot;/images/icons/github.png&quot; alt=&quot;github&quot; /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;redux-loop&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ramda/ramda&quot;&gt;&lt;img src=&quot;/images/icons/github.png&quot; alt=&quot;github&quot; /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ramda&lt;/code&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/ramda/ramda/issues/2319&quot;&gt;отрефакторили&lt;/a&gt; на ES6-модули, и теперь можно нормально делать tree shaking&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://mbeaudru.github.io/modern-js-cheatsheet/&quot;&gt;Ещё один справочник современного JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate>
        <link>/2017/10/18/cgc-14</link>
        <guid isPermaLink="true">/2017/10/18/cgc-14</guid>
      </item>
    
      <item>
        <title>CSSSR Garbage Collector #13</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/share/cgc-cover-13.jpg&quot; alt=&quot;CSSSR Garbage Collector&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Еженедельная подборка ссылок из чатов CSSSR на интересные материалы.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csssr.ru/2017/10/07/side-effects/&quot;&gt;Осторожно! Возможны побочные эффекты.&lt;/a&gt; Разбираемся с тем, что такое сайд-эффекты и что они несут нашему коду&lt;/li&gt;
  &lt;li&gt;CSSSR Shorts:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=4GLIiyoIscQ&amp;amp;index=9&amp;amp;list=PLLtDv0NfxtZxP4kESksdaHyN3ss4nsONz&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; №9: Варианты записи функций в компоненте React и передача контекста this&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=hIeFDbs8_xI&amp;amp;index=10&amp;amp;list=PLLtDv0NfxtZxP4kESksdaHyN3ss4nsONz&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; №10: Memoizee кэширование, и зачем оно нужно для оптимизации React приложений&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=gB-pcQiOTDc&amp;amp;index=11&amp;amp;list=PLLtDv0NfxtZxP4kESksdaHyN3ss4nsONz&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; №11: Memoizee кэширование для передачи данных функции до её выполнения&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=WNPEP1ENQq4&amp;amp;index=12&amp;amp;list=PLLtDv0NfxtZxP4kESksdaHyN3ss4nsONz&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; №12: Используем имя компонента из константы, облегчаем вёрстку при разных условиях&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=BGJzVuloiD8&amp;amp;index=13&amp;amp;list=PLLtDv0NfxtZxP4kESksdaHyN3ss4nsONz&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; №13: Выводим переменные в консоль, действительно не меняя код&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=tZUF55gHAmk&amp;amp;index=14&amp;amp;list=PLLtDv0NfxtZxP4kESksdaHyN3ss4nsONz&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; №14: Reselect – более умная функция кэширования&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OAFys-zohlU&amp;amp;index=15&amp;amp;list=PLLtDv0NfxtZxP4kESksdaHyN3ss4nsONz&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; №15: Reselect кэширование в connect функции Redux&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Обновился &lt;a href=&quot;https://github.com/gaearon/react-hot-loader&quot;&gt;&lt;img src=&quot;/images/icons/github.png&quot; alt=&quot;github&quot; /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;react-hot-loader&lt;/code&gt;&lt;/a&gt; до 3 версии. Добавлена поддержка React 16&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vuejs.org/v2/style-guide/&quot;&gt;Официальный стайл-гайд Vue.js&lt;/a&gt; (бета)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://vue-test-utils.vuejs.org/en/&quot;&gt;Официальная либа для юнит-тестов Vue.js&lt;/a&gt; (бета)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://medium.com/the-vue-point/upcoming-typescript-changes-in-vue-2-5-e9bd7e2ecf08&quot;&gt;&lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; Анонс изменений в Vue.js v2.5 с улучшенной поддержкой TypeScript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://medium.com/@gustojs/vuejs-3-and-other-top-news-from-q-a-event-with-core-vue-devs-c9834946ae7b&quot;&gt;&lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; Немного из конфы  Q&amp;amp;A и Vue 3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/devschacht/пять-плагинов-vuex-f0ba8370b0d5&quot;&gt;&lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; 5 полезных плагинов для Vuex&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/partyka95/vue-decorators/blob/master/README.md&quot;&gt;&lt;img src=&quot;/images/icons/github.png&quot; alt=&quot;github&quot; /&gt; Декораторы для Vue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/16314750/settimeout-fires-immediately-if-the-delay-more-than-2147483648-milliseconds&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; выполняется сразу же, если задержка указана больше, чем 2147483648 миллисекунд&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 11 Oct 2017 00:00:00 +0000</pubDate>
        <link>/2017/10/11/cgc-13</link>
        <guid isPermaLink="true">/2017/10/11/cgc-13</guid>
      </item>
    
      <item>
        <title>Осторожно! Возможны побочные эффекты</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Начинать нужно с того, что сеет сомнение.&lt;/p&gt;

  &lt;p&gt;– &lt;cite&gt;Братья Стругацкие&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;типичный-фронтенд&quot;&gt;Типичный фронтенд&lt;/h2&gt;

&lt;p&gt;Давайте посмотрим на простой пример фронтенд-кода:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC&amp;amp;tag=cats'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BUTTON'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;image_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gifSrc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'img'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'src'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gifSrc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Что является результатом работы этой функции?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;функция делает HTTP запрос при помощи &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;функция устанавливает атрибут &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; тегу &lt;code class=&quot;highlighter-rouge&quot;&gt;img&lt;/code&gt; при помощи &lt;code class=&quot;highlighter-rouge&quot;&gt;.setAttribute&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;От чего зависит эта функция?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;функция зависит от событий, полученных из &lt;code class=&quot;highlighter-rouge&quot;&gt;document.addEventListener&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;функция зависит от результата HTTP запроса, полученного из &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Теперь давайте скроем реализацию функции и ещё раз посмотрим на неё:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Хм, теперь кажется, что функция ни от чего не зависит и вообще ничего не делает. В целом всё логично — не видя реализации функции, мы не можем определить её действие. Давайте посмотрим на другую функцию:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;И скроем её реализацию:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;В этом случае мы видим и от чего зависит функция, и что возвращает: она явно что-то делает и возвращает результат, вычисленный от переданного ей &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Почему так? В чем разница между &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;sum&lt;/code&gt;? Что это за два разных вида функций?&lt;/p&gt;

&lt;h2 id=&quot;два-вида-функций&quot;&gt;Два вида функций&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sum&lt;/code&gt; берёт зависимые значения &lt;em&gt;только&lt;/em&gt; из списка аргументов и возвращает результат &lt;em&gt;только&lt;/em&gt; при помощи оператора &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; — то есть взаимодействует с окружающим кодом &lt;em&gt;только&lt;/em&gt; через стандартные механизмы вызова функции.&lt;/p&gt;

&lt;p&gt;Такие функции называются чистыми (pure).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; же, наоборот, в качестве аргументов использует данные, которые попадают в неё неявно (не через список аргументов), и возвращает результат своей работы неявно (не через &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Про такие функции говорят, что они обладают &lt;em&gt;сайд-эффектами&lt;/em&gt;, и в противоположность чистым функциям их называют грязными.&lt;/p&gt;

&lt;p&gt;То есть:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cайд-эффектами называют неявные зависимости функции или неявные результаты её работы.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Звучит довольно просто, однако на практике в языках без явных ограничений на чистоту функции &lt;a href=&quot;http://staltz.com/is-your-javascript-function-actually-pure.html&quot;&gt;данное определение предстаёт не таким однозначным&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Чтобы избежать софистики, давайте вместо попытки дать определение сайд-эффектам попробуем выделить их ключевые свойства. То, что будет удовлетворять этим свойствам, мы и будем считать сайд-эффектом.&lt;/p&gt;

&lt;h2 id=&quot;сайд-эффект--что-ты-такое&quot;&gt;Сайд-эффект — что ты такое?&lt;/h2&gt;

&lt;p&gt;Первое и самое главное:&lt;/p&gt;

&lt;h4 id=&quot;сайд-эффект--это-не-первоклассный-обьект&quot;&gt;Сайд-эффект — это не первоклассный обьект&lt;/h4&gt;

&lt;p&gt;Что это значит? &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82_%D0%BF%D0%B5%D1%80%D0%B2%D0%BE%D0%B3%D0%BE_%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B0&quot;&gt;Первоклассный объект (first-class object)&lt;/a&gt; — это сущность в языке программирования, которую:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;можно сохранить в переменной или структурах данных;&lt;/li&gt;
  &lt;li&gt;можно передать в функцию как аргумент;&lt;/li&gt;
  &lt;li&gt;можно вернуть из функции как результат.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Проще говоря, первоклассный объект можно легко представить в виде некоторого &lt;em&gt;значения&lt;/em&gt;.
Очевидно, что для сайд-эффектов это не так. Мы не можем просто взять и переписать функцию &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; в виде:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;httpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;domEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logic&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;domMutation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/side-effects/no-first-class.jpg&quot; alt=&quot;No first class&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;сайд-эффекты-зависят-отвлияют-на-внешнее-окружение&quot;&gt;Сайд-эффекты зависят от/влияют на внешнее окружение&lt;/h4&gt;

&lt;p&gt;Это довольно очевидное свойство. Для того, чтобы корректно выполнить некоторый сайд-эффект, нам необходимо корректное окружение: для HTTP запроса нужна рабочая сеть, для запроса к DOM необходим сформированный DOM и так далее.&lt;/p&gt;

&lt;h4 id=&quot;сайд-эффекты-лишают-функции-ссылочной-прозрачности&quot;&gt;Сайд-эффекты лишают функции ссылочной прозрачности&lt;/h4&gt;

&lt;p&gt;Ссылочная прозрачность (referential transparency) — свойство функции, благодаря которому можно всегда и везде вместо результата работы функции подставить её вызов.&lt;/p&gt;

&lt;p&gt;То есть вместо &lt;code class=&quot;highlighter-rouge&quot;&gt;var result = sum(list); return [result, result];&lt;/code&gt; можно спокойно написать &lt;code class=&quot;highlighter-rouge&quot;&gt;return [sum(list), sum(list)];&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Функции с сайд-эффектами не обладают этим свойством — вызвав &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; два раза, мы получим совершенно другие результаты (будет два listener вместо одного, два HTTP запроса при клике вместо одного и так далее).&lt;/p&gt;

&lt;h4 id=&quot;сайд-эффекты-изменяют-свойства-кода-в-котором-используются-до-самой-вершины-стека-вызовов&quot;&gt;Сайд-эффекты изменяют свойства кода, в котором используются, до самой вершины стека вызовов&lt;/h4&gt;

&lt;p&gt;Функция с сайд-эффектом внутри сама становится в некотором смысле сайд-эффектом. Что такое &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;? Это функция, которая внутри себя содержит сайд-эффекты, или это целиком сайд-эффект? А если завернуть её в дополнительную обёртку? Для нас важно то, что использование сайд-эффектов внутри других функций приводит к приобретению этими функциями всех свойств сайд-эффектов.&lt;/p&gt;

&lt;p&gt;На самом деле, скорее всего, последние два свойства вытекают из первого — но это только догадка, и поэтому я решил вынести их в отдельные пункты.&lt;/p&gt;

&lt;h2 id=&quot;что-всё-это-значит-для-нас&quot;&gt;Что всё это значит для нас?&lt;/h2&gt;

&lt;p&gt;Ну, окей, сайд-эффекты имеют какие-то свои специфичные свойства. Но что эти свойства означают для нас на практике?&lt;/p&gt;

&lt;h4 id=&quot;код-с-сайд-эффектами-сложен-для-анализа-как-человеком-так-и-машиной&quot;&gt;Код с сайд-эффектами сложен для анализа (как человеком, так и машиной)&lt;/h4&gt;

&lt;p&gt;Для начала давайте посмотрим на код без сайд-эффектов — все функции в нём чистые.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calcAnything&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calcA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calcB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;с&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alcC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Мы можем легко увидеть, какие значения от каких зависят, а какие не играют роли. К примеру, мы видим, что от &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; ничего не зависит и его вычисление можно смело удалить.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calcAnything&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;с&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alcC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calcB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Более того, мы можем построить граф вычислений:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/side-effects/analyze.svg&quot; alt=&quot;Scheme of control flow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;А теперь попробуем проделать то же самое с кодом, в котором, &lt;em&gt;возможно&lt;/em&gt;, содержатся сайд-эффекты:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomethingA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomethingB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomethingC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Мы всё ещё можем сказать, что, к примеру, &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; зависит от &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;, но мы не можем со всей уверенностью утверждать, что &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; не зависит от вычисления &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;. Представьте, что &lt;code class=&quot;highlighter-rouge&quot;&gt;doSomethingA&lt;/code&gt; записывает что-то в файл, из которого затем читает &lt;code class=&quot;highlighter-rouge&quot;&gt;doSomethingB&lt;/code&gt;. Соответственно, в коде с сайд-эффектами любое вычисление потенциально может зависеть от любого, так как все они влияют на один и тот же внешний мир.&lt;/p&gt;

&lt;p&gt;Это оказывает влияние на:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;машинный анализ (IDE не сможет подсказать нам, правильно ли мы используем ту или иную функцию);&lt;/li&gt;
  &lt;li&gt;анализ человеком (зачастую код-ревью просто не работает, потому что правки кода в одном месте влияют на другую часть системы).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Также в случае кода с сайд-эффектами значительно усложняется рефакторинг. К примеру, удаление неиспользующегося кода:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/side-effects/complicate-refactoring.gif&quot; alt=&quot;Delete unused code&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;код-с-сайд-эффектами-сложно-переиспользовать&quot;&gt;Код с сайд-эффектами сложно переиспользовать&lt;/h4&gt;

&lt;p&gt;Это менее очевидное следствие из свойств сайд-эффектов. Давайте вновь взглянем на код, состоящий из чистых функций.&lt;/p&gt;

&lt;p&gt;Мы написали функцию, которая считает длину и сумму массива:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calcLengthAndSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Используя её, мы можем легко написать функцию, вычисляющую только длину списка:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calcLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calcLengthAndSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Или его среднее:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calcMean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calcLengthAndSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Чистые функции крайне легко переиспользуются: даже если они делают что-то лишнее или что-то немного не так, мы всегда можем исправить это, просто добавив обёртку из ещё одной чистой функции.&lt;/p&gt;

&lt;p&gt;Как говорится:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Любую проблему можно решить путём введения дополнительного уровня абстракции, кроме проблемы слишком большого количества уровней абстракции.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;Давайте посмотрим на функцию с сайд-эффектами, которая делает HTTP запрос и записывает результат в некий файл:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sendRequestAndWriteFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Теперь где-то в коде нам понадобилось отправлять тот же запрос, но не записывать его в файл.&lt;/p&gt;

&lt;p&gt;Cкорее всего, мы добавим специальную опцию в &lt;code class=&quot;highlighter-rouge&quot;&gt;sendRequestAndWriteFile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sendRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sendRequestAndWriteFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;onlyRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;То же самое для ситуации, когда нам захотелось отправлять запросы на другой URL:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sendRequestAndWriteFileOnUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sendRequestAndWriteFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Так как сайд-эффект — это &lt;em&gt;неявный&lt;/em&gt; результат, мы не можем повлиять на него за пределами места его создания — отбросить его часть или как-то преобразовать, как в случае с результатом &lt;code class=&quot;highlighter-rouge&quot;&gt;calcLengthAndSum&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/side-effects/compose-pure-vs-dirty.svg&quot; alt=&quot;Compose pure vs dirty&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Это заставляет нас вместо простого переиспользования добавлять множество опций в функцию, что очень сильно увеличивает &lt;a href=&quot;https://ru.wikipedia.org/wiki/Цикломатическая_сложность&quot;&gt;цикломатическую сложность&lt;/a&gt; кода a.k.a &lt;a href=&quot;http://eslint.org/docs/rules/complexity&quot;&gt;complexity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Количество вариантов выполнения растёт со скоростью 2^n: для функции всего с двумя булевыми опциями мы получаем уже 4 варианта исполнения, для трёх опций — уже 8 и так далее.&lt;/p&gt;

&lt;h4 id=&quot;cайд-эффекты-сложно-тестировать&quot;&gt;Cайд-эффекты сложно тестировать&lt;/h4&gt;

&lt;p&gt;С этим наверняка знакомы все. Сравните:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2 + 2 = 4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;с:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'remoteAdd send args to endpoint'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeRes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;remoteAdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fakeRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Выглядит немного сложнее, да? Но постойте, мы не проверили тот факт, что наша функция делает ровно один &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; запрос. Исправим:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;it('remoteAdd send args to endpoint', () =&amp;gt; {
&lt;span class=&quot;gi&quot;&gt;+ var postCalls = [];
&lt;/span&gt;  var fakeRes = {};
  mock(HttpClient, {post: (...args) =&amp;gt; {
&lt;span class=&quot;gi&quot;&gt;+   postCalls.push(args);
&lt;/span&gt;    return fakeRes;
  }})
  var result = remoteAdd(2, 2);
&lt;span class=&quot;gi&quot;&gt;+ expect(postCalls.length).toBe(1);
+ expect(postCalls[0]).toEqual({url: URL, params: {a: 2, b: 2}});
&lt;/span&gt;  expect(result).toBe(fakeRes);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Зачем мы вообще пишем автоматизированные тесты? Для того, чтобы контролировать &lt;em&gt;изменения&lt;/em&gt; кодовой базы. В случае изменения поведения кода мы сразу увидим, что старые тесты не пройдут. Дело в том, что при достаточно большой кодовой базе различные изменения могут конфликтовать между собой и «ломать» друг друга. Автоматические тесты защищают наши изменения от случайной поломки при каких-либо правках (это может быть банальный мерж конфликтов).&lt;/p&gt;

&lt;p&gt;Давайте изменим тестируемые функции и посмотрим, что произойдёт в обоих случаях:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function add(a, b) {
&lt;span class=&quot;gd&quot;&gt;- return a + b;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ return {result: a + b};
&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Тест, конечно же, упадёт — &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; не равно &lt;code class=&quot;highlighter-rouge&quot;&gt;{result: 4}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Теперь давайте изменим &lt;code class=&quot;highlighter-rouge&quot;&gt;remoteAdd&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function remoteAdd(a, b) {
&lt;span class=&quot;gi&quot;&gt;+ writeFile('log', [a, b]);
&lt;/span&gt;  return HttpClient.post(a, b);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Результат работы функции изменился — теперь она ещё и пишет в файл. Однако наш тест совершенно этого не заметил и продолжает проходить как ни в чём не бывало.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/side-effects/bad-tests.png&quot; alt=&quot;My tests is passed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Так как функции с сайд-эффектами зависят от внешнего мира и влияют на него неявно, то, соотвественно, чтобы корректно протестировать такую функцию, необходимо:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;полностью смоделировать &lt;em&gt;весь&lt;/em&gt; окружающий мир (сетевые запросы, состояние &lt;code class=&quot;highlighter-rouge&quot;&gt;DOM&lt;/code&gt;, состояние файловой системы) в виде некоторого &lt;em&gt;значения&lt;/em&gt; до вызова функции;&lt;/li&gt;
  &lt;li&gt;вызвать функцию;&lt;/li&gt;
  &lt;li&gt;проверить состояние значения, моделирующего &lt;em&gt;весь&lt;/em&gt; внешний мир.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Очевидно, что сделать это полностью корректно, скорее всего, &lt;em&gt;невозможно&lt;/em&gt;, так как количество типов сайд-эффектов в &lt;code class=&quot;highlighter-rouge&quot;&gt;JS&lt;/code&gt; не ограничено.&lt;/p&gt;

&lt;p&gt;Ситуацию может немного исправить соглашение, что все зависимости, которые могут исполнять сайд-эффекты, должны явно передаваться в функцию, то есть:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;-function remoteAdd(a, b) {
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+function remoteAdd(a, b, HttpClient) {
&lt;/span&gt;  return HttpClient.post(a, b);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Добавим &lt;code class=&quot;highlighter-rouge&quot;&gt;writeFile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;-function remoteAdd(a, b, HttpClient) {
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+function remoteAdd(a, b, HttpClient, writeFile) {
+ writeFile('log', [a, b]);
&lt;/span&gt;  return HttpClient.post(a, b);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Наш тест упадёт с &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined is not function&lt;/code&gt;, так как мы не передали &lt;code class=&quot;highlighter-rouge&quot;&gt;writeFile&lt;/code&gt;. Отлично!&lt;/p&gt;

&lt;p&gt;Какие проблемы у подобного подхода:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;мы не можем точно определить, какие зависимости делают сайд-эффект, а какие нет. Поэтому мы будем передавать абсолютно &lt;em&gt;все&lt;/em&gt; зависимости таким образом. Очевидно, что делать это самостоятельно невозможно, поэтому нам понадобится &lt;a href=&quot;https://docs.angularjs.org/guide/module#!&quot;&gt;специальная система модулей&lt;/a&gt;. Данный подход получил название Dependency Injection.&lt;/li&gt;
  &lt;li&gt;даже с такой системой мы всё ещё можем написать плохой мок в тестах — к примеру, полениться проверить вызов метода &lt;code class=&quot;highlighter-rouge&quot;&gt;.put&lt;/code&gt; у &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt;. Да, мы сделали описание зависимости от внешнего мира более явным. Но у нас всё ещё нет стандартного способа сравнить состояние мира до и после, как мы можем сделать это с данными при помощи стандартной операции глубокого сравнения. Эту операцию мы будем вынуждены писать заново каждый раз для каждой зависимости и, скорее всего, для каждого теста. И рано или поздно мы, вероятней всего, где-нибудь допустим ошибку.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Если бы мы хотели протестировать код с сайд-эффектами «честно», мы должны были написать что-то подобное:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// некий объект, отслеживающий состояние внешнего мира&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;remoteAdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// все изменения внешнего мира с момента создания объекта&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;changes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sideEffects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Тогда бы мы получили возможность сверять выполненные сайд-эффекты в функции с ожидаемыми при помощи стандартного &lt;code class=&quot;highlighter-rouge&quot;&gt;.toEqual&lt;/code&gt; (обычного глубокого сравнения объектов). Простая передача зависимостей через аргументы (и DI как её следствие) не даёт нам такой возможности — это половинчатое решение. С одной стороны, оно не решает проблему тестирования до конца, с другой — вносит определённое усложнение в наш код: к статической системе модулей добавляется ещё одна, динамическая. Так случилось потому, что вместо устранения причины проблемы (наличия сайд-эффектов) мы пытались исправить лишь её последствия (сложности тестирования).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rea.tech/to-kill-a-mockingtest/&quot;&gt;Более подробная статья, почему моки — это сложно&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Альтернативным способом решения проблемы является написание полностью интеграционных тестов с полноценным браузерным или серверным окружением. Помимо всё тех же проблем со сложностью создания и сравнения состояния окружения (к примеру, как сравнить весь &lt;code class=&quot;highlighter-rouge&quot;&gt;DOM&lt;/code&gt; до некоторой операции и после?) добавляются ещё и следующие проблемы:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;подобные тесты медленно запускаются, долго работают, тратят кучу электричества, работают ненадёжно;&lt;/li&gt;
  &lt;li&gt;нет возможности хоть как-то локализовать проблему: можно понять, что что-то не работает, но нельзя понять, почему.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cайд-эффекты-непредсказуемы-и-не-воспроизводимы&quot;&gt;Cайд-эффекты непредсказуемы и не воспроизводимы&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;Всё течёт, всё меняется, никто не может дважды войти в один и тот же поток, и к смертной сущности никто не прикоснется дважды!&lt;/p&gt;

  &lt;p&gt;– &lt;cite&gt;Гераклит&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Станете ли вы заворачивать вызов &lt;code class=&quot;highlighter-rouge&quot;&gt;add(2, 2)&lt;/code&gt; в блок &lt;code class=&quot;highlighter-rouge&quot;&gt;try/catch&lt;/code&gt;? Думаю, нет — в этом нет смысла.
А &lt;code class=&quot;highlighter-rouge&quot;&gt;divide(a, b)&lt;/code&gt;? Да, конечно — при &lt;code class=&quot;highlighter-rouge&quot;&gt;b === 0&lt;/code&gt; произойдет ошибка.&lt;/p&gt;

&lt;p&gt;Может ли произойти ошибка при вызове &lt;code class=&quot;highlighter-rouge&quot;&gt;remoteAdd(2, 2)&lt;/code&gt;, и если да, то при каких входных параметрах? Да, может, при любых параметрах. А может и не произойти. Мы не знаем и никак не можем повлиять на это. Внешний мир непредсказуем, он может сломаться в любой момент: браузер может упасть, сеть может погаснуть, а сервер — сгореть.&lt;/p&gt;

&lt;p&gt;Из-за того, что внешний мир непредсказуем и постоянно изменяется, мы также не можем воспроизвести результаты вычислений, содержащих сайд-эффекты.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;add(a, b) === add(a, b)&lt;/code&gt; будет всегда истинно в любых условиях и окружении. Мы можем легко воспроизвести результаты некоторой проблемы с продакшена, просто взяв, к примеру, входные данные с мониторинга и запустив вычисления с этими параметрами. Сайд-эффекты приводят к невоспроизводимым багам: чтобы понять, в чём была проблема, нам надо проанализировать не только наш код, но и состояние всего окружающего мира в тот момент. Это намного более трудоёмко, а порой и вообще невозможно.&lt;/p&gt;

&lt;h4 id=&quot;cайд-эффекты-не-типизируются&quot;&gt;Cайд-эффекты не типизируются&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/side-effects/undefined-is-not-function.jpg&quot; alt=&quot;Undefined is not a function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Одним из способов контроля кодовой базы и доказательства отсутствия нежелательного поведения программы является статическая типизация.&lt;/p&gt;

&lt;p&gt;Очень много копий сломано вокруг того, &lt;a href=&quot;https://habrahabr.ru/post/192108/&quot;&gt;нужна ли она вообще&lt;/a&gt; или &lt;a href=&quot;https://medium.com/javascript-scene/the-shocking-secret-about-static-types-514d39bf30a3#.kzfrsyeim&quot;&gt;нет&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Моё мнение простое: статическая типизация — это инструмент, незаменимый для написания некоторого типа ПО — такого, где очень много кода, много программистов, много связанных подсистем.&lt;/p&gt;

&lt;p&gt;Однако вопрос не в этом, а в том, как на использование типизации влияют сайд-эффекты. Рассмотрим пример: предположим, мы имеем функцию, которая по описанию изменения как-то модифицирует &lt;code class=&quot;highlighter-rouge&quot;&gt;DOM&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patchDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DOMPatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Неявно эта функция зависит от существования &lt;code class=&quot;highlighter-rouge&quot;&gt;DOM&lt;/code&gt;. И её результатом является его изменение. Однако мы никак не можем описать эту информацию в типах — ни о неявной зависимости от &lt;code class=&quot;highlighter-rouge&quot;&gt;DOM&lt;/code&gt;, ни о том, что её результатом будет его изменение. В результате, если мы случайно применим эту функцию в окружении без DOM, то получим ошибку при исполнении:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serverProgram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;patchDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// run-time error&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Сайд-эффекты за счет своей неявности не поддаются описанию типами, и тайп-чекер не может помочь найти проблемы с ними.&lt;/p&gt;

&lt;p&gt;Возможным решением является использование &lt;a href=&quot;https://medium.com/@gcanti/higher-kinded-types-in-flow-275b657992b7#.430oe011t&quot;&gt;имитации Higher-Kinded types&lt;/a&gt; для реализации &lt;a href=&quot;https://medium.com/@gcanti/the-eff-monad-implemented-in-flow-40803670c3eb#.521yqwoyu&quot;&gt;типа &lt;code class=&quot;highlighter-rouge&quot;&gt;Eff&lt;/code&gt;&lt;/a&gt; при помощи &lt;code class=&quot;highlighter-rouge&quot;&gt;Flow&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DOM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DOM'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patchDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DOMPatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Eff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DOM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;И, соотвественно, &lt;code class=&quot;highlighter-rouge&quot;&gt;serverProgram&lt;/code&gt; просто не скомпилируется, если у неё в типе не будет указан &lt;code class=&quot;highlighter-rouge&quot;&gt;Eff&lt;/code&gt; типа &lt;code class=&quot;highlighter-rouge&quot;&gt;{ write: DOM }&lt;/code&gt;, а внутри неё будет использоваться &lt;code class=&quot;highlighter-rouge&quot;&gt;patchDOM&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Однако:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;этот способ полагается на не самые очевидные механизмы &lt;code class=&quot;highlighter-rouge&quot;&gt;Flow&lt;/code&gt; и довольно сложен для понимания;&lt;/li&gt;
  &lt;li&gt;он не поможет в случае наличия сайд-эффектов в коллбэках или других местах, из которых нельзя &lt;em&gt;вернуть&lt;/em&gt; результат;&lt;/li&gt;
  &lt;li&gt;такие типы не будут выведены для javascript API (&lt;code class=&quot;highlighter-rouge&quot;&gt;console&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;XMLHttpRequest&lt;/code&gt; и так далее).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;В общем, решение не общее и не самое простое.&lt;/p&gt;

&lt;h4 id=&quot;усложнение-интерактивной-разработки-кода-с-сайд-эффектами&quot;&gt;Усложнение интерактивной разработки кода с сайд-эффектами&lt;/h4&gt;

&lt;p&gt;Интерактивная разработка начинает набирать популярность. Практически все более-менее популярные языки имеют в стандартной поставке &lt;a href=&quot;https://ru.wikipedia.org/wiki/REPL&quot;&gt;REPL&lt;/a&gt; (отдельно или в составе дебаггера). Современные браузеры вообще позволяют &lt;a href=&quot;http://www.hongkiat.com/blog/google-chrome-workspace/&quot;&gt;писать код прямо в них&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Появляются и отдельные IDE, нацеленные именно на интерактивную разработку. К примеру, &lt;a href=&quot;http://lighttable.com&quot;&gt;Light table&lt;/a&gt;, позволяющая в реальном времени следить за результатами вычислений:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/side-effects/watches.png&quot; alt=&quot;Light Table&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tonsky.me/blog/interactive-development/&quot;&gt;Отличная статья о том, почему интерактивная разработка — это прекрасно!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Давайте посмотрим, какие коррективы вносят сайд-эффекты в подобную практику. Допустим, мы разрабатываем функцию, осуществляющую запрос на удаление некоторого юзера — &lt;code class=&quot;highlighter-rouge&quot;&gt;deleteUser&lt;/code&gt;. Очевидно, что мы не сможем запустить эту функцию несколько раз для одного и того же юзера, чтобы проверить её работу в REPL. Более того, для проверки результатов её работы нам понадобится каждый раз смотреть текущее состояние сервера.&lt;/p&gt;

&lt;p&gt;Главное преимущество интерактивной разработки — быстрая ответная реакция от только что написанного кода — в таком случае сводится на нет тем, что нам необходимо постоянно наблюдать состояние окружающего мира и периодически исправлять его. Например, восстанавливать удалённого юзера.&lt;/p&gt;

&lt;p&gt;Возможным решением здесь будет REPL, интегрированный в тестовый фреймворк: &lt;code class=&quot;highlighter-rouge&quot;&gt;jest-repl&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mocha debug repl&lt;/code&gt; со встроенной возможностью устанавливать моки для определённых сайд-эффектов.&lt;/p&gt;

&lt;h4 id=&quot;для-кода-с-сайд-эффектами-сложно-применить-тестирование-основанное-на-проверке-свойств&quot;&gt;Для кода с сайд-эффектами сложно применить тестирование, основанное на проверке свойств&lt;/h4&gt;

&lt;p&gt;Тестирование, основанное на проверке свойств, или генеративное тестирование, или property-based тестирование — техника, позволяющая описывать свойства какой-то программной сущности (функции, к примеру) и проверять её при помощи генерации входных параметров.&lt;/p&gt;

&lt;p&gt;Это очень мощная техника, которая позволяет доказать (с некоторой долей вероятности, конечно же) некоторые утверждения о программном коде. Она становится особенно важной в языках без сильной статической системы типов.&lt;/p&gt;

&lt;p&gt;Но, как я отметил в &lt;a href=&quot;http://blog.csssr.ru/2017/04/25/property-testing/&quot;&gt;предыдущей своей статье&lt;/a&gt;, крайне сложно определить какое-либо свойство для кода с сайд-эффектами — за счет их непредсказуемости.&lt;/p&gt;

&lt;h2 id=&quot;мелкие-вредители-вредящие-по-крупному&quot;&gt;Мелкие вредители, вредящие по-крупному&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/side-effects/gremlins.png&quot; alt=&quot;Gremlin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Сайд-эффекты — как гремлины, ломают все доступные программисту инструменты, до которых доберутся: типизация, тесты, интерактивные среды, статические анализаторы в IDE, код-ревью.&lt;/p&gt;

&lt;p&gt;Но почему это всё действительно важно? Ну да, что-то стало сложнее сделать, но программисты привыкли к борьбе со сложностями. И в отдельных пунктах я приводил результаты такой борьбы — инструменты, которые призваны хоть как-то уменьшить негативное влияние сайд-эффектов.&lt;/p&gt;

&lt;p&gt;Проблема в том, что сайд-эффекты не только усложняют написание и работу с самим кодом, но и «ломают» два &lt;em&gt;базовых&lt;/em&gt; способа разработки ПО. И это уже реальная проблема.&lt;/p&gt;

&lt;h2 id=&quot;два-сломанных-способа-разработки-по&quot;&gt;Два &lt;del&gt;сломанных&lt;/del&gt; способа разработки ПО&lt;/h2&gt;

&lt;p&gt;На самом &lt;em&gt;высоком&lt;/em&gt; уровне, по большому счету, существует только &lt;a href=&quot;https://en.wikipedia.org/wiki/Top-down_and_bottom-up_design&quot;&gt;два способа разработки&lt;/a&gt;. Всё остальное — либо их комбинации, либо производные.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/side-effects/vityaz.png&quot; alt=&quot;Top Down or Bottom up&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Давайте рассмотрим на простом примере оба способа. Предположим, что нам надо разработать систему &lt;code class=&quot;highlighter-rouge&quot;&gt;printSum&lt;/code&gt;, которая будет выводить на экран сумму какого-то списка.&lt;/p&gt;

&lt;h4 id=&quot;сверху-вниз-aka-нисходящий-стиль-aka-top-down&quot;&gt;«Сверху-вниз» a.k.a Нисходящий стиль a.k.a Top-Down&lt;/h4&gt;

&lt;p&gt;Определяем спецификацию самого верхнего уровня API — описываем входное и выходное воздействие:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;printSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PrintedSumToScreenEffect&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Затем определяем спецификации API уровнем ниже, которые необходимы, чтобы из &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; получить &lt;code class=&quot;highlighter-rouge&quot;&gt;PrintedSumToScreenEffect&lt;/code&gt;. Очевидно, что нам требуются две функции:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;printToScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PrintedSumToScreenEffect&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Теперь, просто глядя на спецификации, мы понимаем, что сначала необходимо вызывать от &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt; функцию &lt;code class=&quot;highlighter-rouge&quot;&gt;sum&lt;/code&gt;, а затем от её результата —  &lt;code class=&quot;highlighter-rouge&quot;&gt;printToScreen&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Осталось придумать, как записывать спецификацию для описания входных и выходных данных:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;В идеале она должна описывать все возможные входные воздействия и результаты довольно общим образом — тесты подходят не очень хорошо, так как они описывают отдельные кейсы вместо общего поведения системы.&lt;/li&gt;
  &lt;li&gt;Мы должны иметь возможность проверить, что разработанная нами программа соответствует изначальной спецификации, иначе при имплементации есть большой шанс получить значительное расхождение со спецификацией. Диаграммы и прочие способы, связанные с &lt;a href=&quot;https://ru.wikipedia.org/wiki/UML&quot;&gt;ИЗО&lt;/a&gt;, не дадут нам такой возможности.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Вы, наверно, уже догадались, что лучше всего здесь &lt;a href=&quot;http://blog.ploeh.dk/2015/08/10/type-driven-development/&quot;&gt;подойдёт хорошая система типов&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Люди иногда спрашивают: «Что служит аналогом UML для Haskell?». Когда меня впервые спросили об этом 10 лет назад, я подумал: «Ума не приложу. Может быть, нам стоит придумать свой UML». Сейчас я думаю: «Это просто типы!». Люди рисуют UML-диаграммы, чтобы понять общую схему программы. Именно этим занимаются программисты на функциональных языках и на Haskell, когда придумывают сигнатуры типов для модулей и функций в этих модулях.&lt;/p&gt;

  &lt;p&gt;– &lt;cite&gt;&lt;a href=&quot;http://fprog.ru/2010/issue6/interview-simon-peyton-jones/&quot;&gt;Саймон Пейтон Джонс&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Однако, как мы выяснили, без определённых уловок большая часть систем типов не способны работать с сайд-эффектами и уж точно не могут вывести типы таких эффектов из контекста. Можно было бы, конечно, заменить типы тестами (что, например, сделано во всем известном Test Driven Development), но, как мы уже увидели, тесты не очень хорошо подходят для этого из-за своей дискретной природы, к тому же они тоже страдают от сайд-эффектов.&lt;/p&gt;

&lt;p&gt;Таким образом сайд-эффекты ломают первый базовый способ разработки ПО. Но, может, со вторым нам повезёт больше?&lt;/p&gt;

&lt;h4 id=&quot;снизу-вверх-aka-восходящий-стиль-aka-bottom-up&quot;&gt;«Снизу-вверх» a.k.a Восходящий стиль a.k.a Bottom-Up&lt;/h4&gt;

&lt;p&gt;Мы можем пойти с другой стороны.&lt;/p&gt;

&lt;p&gt;Уже по описанию задачи видно, что нам надо будет уметь выводить что-то на экран и надо уметь складывать. Мы не будем пытаться определить точные спецификации. Вместо этого просто напишем общие и минимально необходимые функции для этого. Больше всего эти функции будут похожи на отдельные небольшие библиотеки (очень малоспецифичные и очень переиспользуемые единицы), так как мы ещё не знаем, что за API нам придётся с их помощью строить.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// -&amp;gt; 10&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// -&amp;gt; prints 'Hello' to screen&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Затем строим из этих функций API более высокого уровня:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Для такого итеративного процесса нам необходим инструмент, позволяющий легко экспериментировать с небольшими кусочками кода и иметь возможность быстро запустить отдельные функции на разных входных данных. При этом в процессе разработки нам не так важно зафиксировать некоторый результат и уметь его воспроизводить — вероятней всего, мы редко будем менять имплементацию уже написанного API. Тесты тут будут скорее мешать низкой скоростью ответной реакции и своей хрупкостью.&lt;/p&gt;

&lt;p&gt;Лучше всего для такого стиля разработки подойдёт &lt;code class=&quot;highlighter-rouge&quot;&gt;REPL&lt;/code&gt;. Собственно, такой вид разработки и получил распространие в языках с богатой практикой использования &lt;code class=&quot;highlighter-rouge&quot;&gt;REPL&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;Lisp&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SmallTalk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Однако, как мы помним, &lt;code class=&quot;highlighter-rouge&quot;&gt;REPL&lt;/code&gt; теряет свое главное преимущество (быстрый отклик) при разработке кода с сайд-эффектами. Второй фундаментальный способ тоже не выдержал этой битвы.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/side-effects/vityaz-no-way.png&quot; alt=&quot;Dead knigth&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Но ведь не весь наш код содержит сайд-эффекты? И, может, все эти неприятности касаются только тех участков, в которых мы их используем? Может, просто стараться использовать поменьше «грязных» функций и побольше «чистых»?&lt;/p&gt;

&lt;h2 id=&quot;лед-9-для-программного-кода&quot;&gt;Лед-9 для программного кода&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/side-effects/cats-cradle.jpg&quot; alt=&quot;Cats cradle&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;- Ты читал «Колыбель для кошки»?&lt;/p&gt;

  &lt;p&gt;- Нет.&lt;/p&gt;

  &lt;p&gt;- Итак, в этом романе мир погибает потому, что во льду обнаружена молекула, которая при соприкосновении с водой превращает её в лед. А поскольку все воды мира связаны — пруд с ручьем, ручей с рекой, река с озером, озеро с океаном — таким образом, весь мир замерзает и погибает. И эта молекула называется «Лед-9».&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;Программисты, заставшие &lt;code class=&quot;highlighter-rouge&quot;&gt;JS&lt;/code&gt; без &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;async-await&lt;/code&gt;, могут почувствовать что-то знакомое в описании недостатков сайд-эффектов. Эти же проблемы зачастую упоминались в обсуждении асинхронных функций, основанных на коллбэках.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Асинхронность и сайд-эффекты выглядят довольно связанными проблемами — решив только одну из них, вы не избавитесь от всех их недостатков, они лишь переместятся. С другой стороны, хорошее решение одной из этих проблем может помочь решить другую. В дальнейшем мы увидим, что это не случайно и на самом деле оба этих явления представляют собой лишь частные случаи более фундаментальной проблемы отсутствия общего способа абстракции control-flow программы и выражения его first-class значениями.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Но самое ужасное в таких функциях было то, что они заражали весь код, в котором использовались. Обычная функция при использовании в ней функции с коллбэком переставала возвращать результат через &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; и начинала прокидывать его в коллбэк — и, в свою очередь, сама становилась «ядом» для использующего её кода.&lt;/p&gt;

&lt;p&gt;Появилась даже метафора двухцветного языка:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/&quot;&gt;Статья Bob Nystrom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OGSppLmGchY&quot;&gt;Доклад Андрея Саломатина&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;•&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomethingAzure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// This is a blue function...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;•&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomethingCarnelian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// This is a red function...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;•&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomethingAzure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;doSomethingCarnelian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;•&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Error — you can't call red inside blue&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Все функции в языке делятся на «красные» и «синие». И чтобы вызвать «красную» функцию в «синей», нам необходимо перекрасить «синюю» функцию в красный цвет.&lt;/p&gt;

&lt;p&gt;Происходило это из-за того, что подобные асинхронные функции для взаимодействия с кодом не использовали стандартные способы взаимодействия — возврат значения через &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;. Как мы помним, функции с сайд-эффектами ведут себя так же и возвращают свои результаты неявно.&lt;/p&gt;

&lt;p&gt;Поэтому всё то же самое применимо и к ним:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Функция с сайд-эффектом внутри сама становится сайд-эффектом. Следовательно, используя такую функцию внутри другой (чистой), мы автоматически превращаем её в грязную — она начинает возвращать часть результата неявно. И так далее до самой вершины стека вызовов.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Рассмотрим пример. Допустим, у нас есть такая иерархия вызовов:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/side-effects/pure_tree.svg&quot; alt=&quot;Pure tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Все вызовы чистые и предсказуемые. С ними нет никаких проблем.&lt;/p&gt;

&lt;p&gt;Но неожиданно нам понадобилось кэшировать результаты вычисления функции &lt;code class=&quot;highlighter-rouge&quot;&gt;calcForItem&lt;/code&gt; в &lt;code class=&quot;highlighter-rouge&quot;&gt;localStorage&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calcForItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cachedResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argsHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cachedResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cachedResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argsHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;И наша иерархия стала выглядеть так (красным отмечены функции с сайд-эффектами):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/side-effects/not_pure_tree.svg&quot; alt=&quot;Not pure tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Изменив код всего &lt;em&gt;одной&lt;/em&gt; функции, мы изменили свойства (в плане тестируемости, надёжности, композируемости) для &lt;em&gt;всего&lt;/em&gt; стека вызовов.&lt;/p&gt;

&lt;p&gt;В некотором смысле мы теряем &lt;em&gt;контроль&lt;/em&gt; над своим кодом. Его поведение может измениться, хотя он сам останется прежним — просто API, на котором основан наш код, &lt;em&gt;внезапно&lt;/em&gt; станет «грязным» и «заразит» его.&lt;/p&gt;

&lt;h2 id=&quot;in-soviet-russia-side-effects-control-you&quot;&gt;In Soviet Russia side-effects control you!&lt;/h2&gt;

&lt;p&gt;Если мы не контролируем ПО, то оно начинает контролировать нас (разработчиков). В результате всего вышесказанного у нас получается код, который:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;нельзя&lt;/em&gt; полноценно протестировать, да и, чтобы протестировать хоть как-то, нужно приложить много усилий — из-за этого мы пишем недостаточно тестов. Проверьте свое покрытие кода с сайд-эффектами и кода, работающего только с данными — скорее всего, во втором случае цифра будет намного выше;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;нельзя&lt;/em&gt; полноценно типизировать, потому что значительную часть фронтенд-кода занимают функции типа &lt;code class=&quot;highlighter-rouge&quot;&gt;handleClick(): void&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch(): void&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;setState(): void&lt;/code&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;нельзя&lt;/em&gt; верифицировать или попробовать доказать его свойства при помощи property-based тестов — у большей его части просто нет каких-либо предсказуемых свойств;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;неудобен для работы в интерактивной среде (&lt;code class=&quot;highlighter-rouge&quot;&gt;REPL&lt;/code&gt;), потому что там не получится работать с DOM-элементами или безопасно послать HTTP-запрос;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;практически не поддается рефакторингу, так как сайд-эффекты создают неявные зависимости;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;непредсказуем — невозможно создать надёжные инструменты воспроизведения поведения приложения. Обычно не является проблемой по результатам мониторинга понять, &lt;em&gt;что&lt;/em&gt; произошо. Но вот &lt;em&gt;почему&lt;/em&gt; так произошло — может быть совершенно неясно, так как части приложения влияют друг на друга неявно;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;очень тяжело переиспользуется. Иногда без внесения правок в исходники нельзя переиспользовать то или иное решение. Поэтому наученные горьким опытом разработчики зачастую стремятся не переиспользовать крупные части своего приложения (не говоря уже о больших и сложных сторонних компонентах), так как не ясно, возможно ли будет избавиться от некоторых нежелательных действий, если они вдруг станут не нужны.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;При этом разработчики сами по себе не хотят писать такой код. Почти любой разработчик скажет, что код должен быть хорошо тестируемым, переиспользуемым и так далее. Нас учат этому с самого начала работы в индустрии.&lt;/p&gt;

&lt;p&gt;Однако сайд-эффекты в нашем коде вынуждают нас частично отказаться от всех хороших практик и практически всех доступных программисту инструментов.&lt;/p&gt;

&lt;p&gt;Софт, который контролирует людей? Я знаю, кому это точно понравится:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/side-effects/skynet.png&quot; alt=&quot;Skynet&quot; /&gt;&lt;/p&gt;

&lt;p&gt;При этом мы не пытаемся избавиться от этого контроля и воспринимаем его как что-то само собой разумеющееся. Все эти проблемы давно известны, но мы не пытаемся воздействовать на их &lt;em&gt;причину&lt;/em&gt;, а только исправляем отдельные симптомы:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; стал популярен во многом благодаря тому, что абстрагировал часть сайд-эффектов, возникающих при работе с &lt;code class=&quot;highlighter-rouge&quot;&gt;DOM&lt;/code&gt;. Но только часть — &lt;a href=&quot;https://facebook.github.io/react/docs/handling-events.html&quot;&gt;работа с событиями&lt;/a&gt; и &lt;a href=&quot;https://facebook.github.io/react/docs/refs-and-the-dom.html&quot;&gt;работа с отдельными элементами&lt;/a&gt; всё так же происходят при помощи сайд-эффектов.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Redux&lt;/code&gt; позволил описывать преобразования глобального мутабельного стейта при помощи &lt;a href=&quot;http://redux.js.org/docs/basics/Reducers.html&quot;&gt;чистых функций&lt;/a&gt;. Однако сами изменения вызываются при помощи грязной функции &lt;a href=&quot;http://redux.js.org/docs/api/Store.html#dispatch&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt;&lt;/a&gt;. Да и, к примеру, то же самое сетевое взаимодействие всё так же продолжает порождать сайд-эффекты (хотя это можно исправить при помощи &lt;a href=&quot;https://github.com/redux-loop/redux-loop&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;redux-loop&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/yelouafi/redux-saga&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;redux-saga&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Angular 2&lt;/code&gt;, напротив, позволяет обрабатывать &lt;a href=&quot;http://learnangular2.com/outputs/&quot;&gt;события без использования коллбэков (то есть без сайд-эффектов)&lt;/a&gt;. Но он не имеет какого-либо решения для абстракции остальных сайд-эффектов.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;i-have-a-dream&quot;&gt;I have a dream…&lt;/h2&gt;

&lt;p&gt;Попытки решать фундаментальную проблему, борясь только с её отдельными проявлениями, вряд ли могут увенчаться успехом.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Нам необходимо фундаментальное решение проблемы сайд-эффектов в нашем коде. Причём оно должно было максимально общим — не привязанным к какому-то фреймворку или инфраструктуре и не навязывающим какую-либо конкретную архитектуру. Оно должно решать ровно одну проблему и делать это хорошо.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;Но как мы можем создать такое решение?&lt;/p&gt;

&lt;p&gt;Мы не можем избавиться от сайд-эффектов совсем или даже уменьшить их число — нельзя вдруг начать делать меньше &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; запросов или меньше работать с &lt;code class=&quot;highlighter-rouge&quot;&gt;DOM&lt;/code&gt;. Сайд-эффекты — взаимодействие с внешним миром — это вообще самая главная часть нашего приложения. Если приложение не делает их, значит, скорее всего, оно вообще ничего не делает.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/side-effects/haskell.png&quot; alt=&quot;No side effects&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Но мы можем &lt;em&gt;полностью&lt;/em&gt; отделить логику нашего приложения от сайд-эффектов.&lt;/p&gt;

&lt;p&gt;Всё наше приложение станет полностью чистой функцией — будет явно принимать все входящие воздействия и явно возвращать выходные. А сайд-эффекты будут исполняться отдельно от основного приложения.&lt;/p&gt;

&lt;p&gt;Существует минимум 3 способа сделать это, и все они основаны на теоретических основах Computer Science, разработанных около 40 лет назад.&lt;/p&gt;

&lt;p&gt;Все эти способы объединяет то, что они созданы для абстракции &lt;code class=&quot;highlighter-rouge&quot;&gt;control-flow&lt;/code&gt; программы. &lt;code class=&quot;highlighter-rouge&quot;&gt;Control-flow&lt;/code&gt; — это скелет нашей программы, её базис, поэтому эти способы возникают при решении большей части проблем в Computer Science — не только при решении проблемы сайд-эффектов. Однако это тема для следующей статьи.&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate>
        <link>/2017/10/07/side-effects</link>
        <guid isPermaLink="true">/2017/10/07/side-effects</guid>
      </item>
    
      <item>
        <title>CSSSR Garbage Collector #12</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/share/cgc-cover-12.jpg&quot; alt=&quot;CSSSR Garbage Collector&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Еженедельная подборка ссылок из чатов CSSSR на интересные материалы.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=5S_LviOmr1A&amp;amp;list=PLLtDv0NfxtZw9PE0oAnm-Fy4ere2v3h36&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; CSSSR Shorts&lt;/a&gt; — короткие обучающие видео на тему React&lt;/li&gt;
  &lt;li&gt;Всегда используй &lt;a href=&quot;https://mathiasbynens.github.io/rel-noopener/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rel=&quot;noreferrer noopener&quot;&lt;/code&gt;&lt;/a&gt;, ссылаясь на другой сайт с помощью &lt;code class=&quot;highlighter-rouge&quot;&gt;target=&quot;_blank&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/andywer/webpack-blocks&quot;&gt;&lt;img src=&quot;/images/icons/github.png&quot; alt=&quot;github&quot; /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack-blocks&lt;/code&gt;&lt;/a&gt; — функциональные строительные блоки для твоего webpack конфига: простой способ настроить webpack и делиться конфигурацией между проектами&lt;/li&gt;
  &lt;li&gt;Повторение — мать учения: простое объяснение из рекомендаций от W3C, почему на кнопках нет и не должно быть курсора руки по умолчанию — &lt;a href=&quot;https://www.w3.org/TR/css-ui-3/#valdef-cursor-pointer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cursor: pointer&lt;/code&gt;&lt;/a&gt; обозначает наведение курсора на ссылку&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt; — сверхбыстрый статический генератор сайта для React, на котором, кстати, недавно редизайнулся сам сайт &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://evilmartians.com/chronicles/size-limit-make-the-web-lighter&quot;&gt;Size Limit: сделай веб легче&lt;/a&gt; — демонстрация простой библиотеки, у которой ужали бандл для браузера в 5000 раз&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 04 Oct 2017 00:00:00 +0000</pubDate>
        <link>/2017/10/04/cgc-12</link>
        <guid isPermaLink="true">/2017/10/04/cgc-12</guid>
      </item>
    
      <item>
        <title>CSSSR Garbage Collector #11</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/share/cgc-cover.jpg&quot; alt=&quot;CSSSR Garbage Collector&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Еженедельная подборка ссылок из чатов CSSSR на интересные материалы.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/blog/2017/09/26/react-v16.0.html&quot;&gt;Вышел React v16.0.&lt;/a&gt; Появилась возможность возвращать строку,
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Look ma, no spans!'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;число&lt;/p&gt;
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;или даже массив фрагментов в рендере.&lt;/p&gt;
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Не нужно оборачивать список элементов дополнительным элементом!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Не забудь ключи :)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;First&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Second&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Third&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Добавлен портал для рендера в ноду за пределами родительского компонента, улучшен серверсайд рендеринг и поддержка кастомных атрибутов, улучшена обработка ошибок, уменьшен вес библиотек. Также всё это выпущено под MIT лицензией. Если ваше приложение работает на версии 15.6 без каких-либо предупреждений, то оно будет работать и на 16. Обновляйтесь.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/portals.html&quot;&gt;Порталы в React&lt;/a&gt;
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// React *не* создаст новый div. Вернётся children прямо в `domNode`.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// `domNode` — это любая валидная DOM нода, независимо от его местоположения в DOM.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createPortal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;domNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://medium.com/@aickin/whats-new-with-server-side-rendering-in-react-16-9b0d78585d67&quot;&gt;&lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; Что нового с серверсайд рендерингом в React 16&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://medium.com/webpack/webpack-4-changes-part-1-week-24-25-fd4d77674e55&quot;&gt;&lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; Webpack 4. Изменения, часть 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://blog.risingstack.com/mastering-the-node-js-core-modules-the-process-module/&quot;&gt;Освоение встроенных модулей Node.js — модуль &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/&quot;&gt;Какого цвета твоя функция?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/docs/git-checkout#git-checkout-ltbranchgt&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout @{-1}&lt;/code&gt; или &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -&lt;/code&gt;&lt;/a&gt; — вернуться к предыдущей посещённой ветке, &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout @{-2}&lt;/code&gt; — к позапрошлой и так далее&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.coursera.org/learn/programming-in-python&quot;&gt;Курс программирования на Python&lt;/a&gt; от МФТИ и Mail.ru&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://comaqa.gitbooks.io/java-automation/content/&quot;&gt;Java с нуля&lt;/a&gt; — тур по языку, средства и примеры автоматизации (юнит-тестирование)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://dzone.com/articles/brief-comparison-bdd&quot;&gt;Краткое сравнение BDD фреймворков&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 27 Sep 2017 00:00:00 +0000</pubDate>
        <link>/2017/09/27/cgc-11</link>
        <guid isPermaLink="true">/2017/09/27/cgc-11</guid>
      </item>
    
      <item>
        <title>CSSSR Garbage Collector #10</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/share/cgc-cover.jpg&quot; alt=&quot;CSSSR Garbage Collector&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Еженедельная подборка ссылок из чатов CSSSR на интересные материалы.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;http://stephenradford.me/removing-the-white-bars-in-safari-on-iphone-x/&quot;&gt;Удаляем белые полосы в Safari на iPhone X&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://hackernoon.com/removing-that-ugly-focus-ring-and-keeping-it-too-6c8727fefcd2&quot;&gt;Удаление (и сохранение) этого уродского &lt;code class=&quot;highlighter-rouge&quot;&gt;:focus&lt;/code&gt; кольца.&lt;/a&gt; Простой способ показывать его только тем, кто пользуется клавиатурой&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nicothin.pro/page/oshibki-i-spornye-voprosy-v-html-css-vjorstke&quot;&gt;Ошибки и спорные вопросы в HTML-CSS вёрстке&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/devschacht/functional-reactive-ninja-function-type-signatures-in-javascript-283fe7cd6211&quot;&gt;&lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; Сигнатура типов функции в JavaScript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://medium.com/javascript-scene/javascript-monads-made-simple-7856be57bfe8&quot;&gt;&lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; JavaScript монады сделаны просто&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://babeljs.io/blog/2017/09/12/planning-for-7.0&quot;&gt;Планы на Babel 7.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://philipwalton.com/articles/deploying-es2015-code-in-production-today/&quot;&gt;Выкатываем ES2015+ код в продакшн сегодня&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://lisilinhart.info/posts/waapi-introduction&quot;&gt;Начинаем работать с Web Animation API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dogfessional/react-swipeable&quot;&gt;&lt;img src=&quot;/images/icons/github.png&quot; alt=&quot;github&quot; /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;react-swipeable&lt;/code&gt;&lt;/a&gt; — React-компонент для добавления хэндлеров на свайп&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/blog/2437-announcing-github-desktop-1-0&quot;&gt;&lt;img src=&quot;/images/icons/github.png&quot; alt=&quot;github&quot; /&gt; Вышел GitHub Desktop 1.0&lt;/a&gt; на Electron с дифами изображений, быстрым клонированием, открытием файлов в любимом редакторе кода, а самое главное — опенсорс&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 20 Sep 2017 00:00:00 +0000</pubDate>
        <link>/2017/09/20/cgc-10</link>
        <guid isPermaLink="true">/2017/09/20/cgc-10</guid>
      </item>
    
      <item>
        <title>CSSSR Garbage Collector #9</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/share/cgc-cover.jpg&quot; alt=&quot;CSSSR Garbage Collector&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Еженедельная подборка ссылок из чатов CSSSR на интересные материалы.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; GitHub совместно с Facebook представил &lt;a href=&quot;https://ide.atom.io/&quot;&gt;Atom IDE&lt;/a&gt; — набор опциональных пакетов, приносящих IDE-подобный функционал в Atom&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Вышел &lt;a href=&quot;https://code.facebook.com/posts/274518539716230&quot;&gt;Yarn 1.0&lt;/a&gt;: добавлены Workspaces для установки зависимостей из нескольких &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;, автомёрдж &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn.lock&lt;/code&gt; файлов, объявление поля &lt;code class=&quot;highlighter-rouge&quot;&gt;resolutions&lt;/code&gt;, позволяющее указать специфичные версии пакетов для вложенных зависимостей&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://axesslab.com/disabled-buttons-suck&quot;&gt;Неактивные кнопки — отстой&lt;/a&gt;. &lt;a href=&quot;https://twitter.com/hampelusken&quot;&gt;Хампус Сетфорс&lt;/a&gt; рассказывает, зачем пользователей дурачат кликами на неактивные кнопки и почему не стоит так делать&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jeffbski/wait-on&quot;&gt;&lt;img src=&quot;/images/icons/github.png&quot; alt=&quot;github&quot; /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;wait-on&lt;/code&gt;&lt;/a&gt; — кроссплатформенная утилита командной строки, которая будет ждать появления файлов, портов, ответа от сервера и т.п. перед запуском следующей команды&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ai/nanoevents&quot;&gt;&lt;img src=&quot;/images/icons/github.png&quot; alt=&quot;github&quot; /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;nanoevents&lt;/code&gt;&lt;/a&gt; — простая и крошечная Event Emitter библиотека для JavaScript&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/icebob/vue-form-generator&quot;&gt;&lt;img src=&quot;/images/icons/github.png&quot; alt=&quot;github&quot; /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;vue-form-generator&lt;/code&gt;&lt;/a&gt; — компонент для Vue.js, генерирующий форму из схемы&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://facebook.github.io/react/blog/2017/09/08/dom-attributes-in-react-16.html&quot;&gt;Атрибуты DOM в React 16&lt;/a&gt; — появилась возможность добавлять кастомные атрибуты в тегах&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;a href=&quot;https://hackernoon.com/redux-flow-type-getting-the-maximum-benefit-from-the-fewest-key-strokes-5c006c54ec87&quot;&gt;&lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; Redux и Flow-type — получаем максимум пользы несколькими нажатиями клавиш&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
        <link>/2017/09/13/cgc-9</link>
        <guid isPermaLink="true">/2017/09/13/cgc-9</guid>
      </item>
    
  </channel>
</rss>
