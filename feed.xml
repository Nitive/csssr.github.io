<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSSSR</title>
    <description>CSSSR — веб-студия по фронтенд-разработке. HTML, CSS, JavaScript.</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Новый контекст React в деталях</title>
        <description>&lt;h3 id=&quot;что-такое-контекст&quot;&gt;Что такое контекст&lt;/h3&gt;

&lt;p&gt;В React компонентах, помимо &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;, которые могут быть доступны только у первого потомка от родителя, есть контекст, который доступен у всех потомков родителя (объявившего контекст). Это означает, что как бы глубоко компонент ни находился в дереве компонентов, он имеет доступ к контексту, который мог быть создан на сколь угодно много ветвлений дерева выше (ближе к корню). При этом если контекст обновляется — это также вызывает обновление всех подписанных (использующих контекст) потомков. На основе этого API работают все популярные библиотеки, которым необходимо иметь доступ к общим данным из любой глубины приложения: react-redux, react-mobx, react-router, styled-components (ThemeProvider).&lt;/p&gt;

&lt;h3 id=&quot;проблемы-старого-контекста&quot;&gt;Проблемы старого контекста&lt;/h3&gt;

&lt;p&gt;В &lt;a href=&quot;https://reactjs.org/docs/legacy-context.html&quot;&gt;старой версии&lt;/a&gt; если на определённый контекст подписан и родитель — &lt;strong&gt;componentA&lt;/strong&gt;, и его непосредственный потомок — &lt;strong&gt;componentB&lt;/strong&gt;, то при обновлении контекста нужно произвести обновление их обоих. Из-за этого &lt;strong&gt;componentA&lt;/strong&gt; обновится 1 раз, а &lt;strong&gt;componentB&lt;/strong&gt; два раза: сначала из-за обновления родителя &lt;strong&gt;componentA&lt;/strong&gt;, а потом из-за обновления самого контекста (т.к. компонент на него подписан). Соответственно, количество обновлений подписанного компонента === количеству его подписанных родителей + 1 (собственная подписка компонента). Конечно, это неэффективно и трудозатратно с точки зрения производительности.&lt;/p&gt;

&lt;p&gt;Существуют техники и алгоритмы обхода подписчиков таким образом, чтобы минимизировать (или полностью исключить) дублирование обновления глубоколежащих подписчиков, но их реализация может быть трудоёмкой. Подробнее об этом &lt;a href=&quot;https://youtu.be/TfxfRkNCnmk&quot;&gt;рассказывал&lt;/a&gt; автор библиотеки &lt;code class=&quot;highlighter-rouge&quot;&gt;mobx&lt;/code&gt;. Также можно посмотреть примеры реализации в &lt;code class=&quot;highlighter-rouge&quot;&gt;react-redux&lt;/code&gt; &lt;a href=&quot;https://github.com/reactjs/react-redux/blob/master/src/utils/Subscription.js&quot;&gt;тут&lt;/a&gt; и &lt;a href=&quot;https://github.com/reactjs/react-redux/blob/master/src/components/connectAdvanced.js#L194&quot;&gt;тут&lt;/a&gt;. Это является проблемой при разработке библиотеки, имеющей глобальное динамическое состояние. Автор должен тратить лишние силы и думать об обновлении подписчиков (реализовывать свой механизм «правильного» обхода поверх механизма контекста), хотя этим, казалось бы, должен заниматься React.&lt;/p&gt;

&lt;h3 id=&quot;новое-api-reactcreatecontext&quot;&gt;Новое API &lt;code class=&quot;highlighter-rouge&quot;&gt;React.createContext&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Многие восприняли новый контекст (&lt;a href=&quot;https://reactjs.org/docs/context.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;React.createContext&lt;/code&gt;&lt;/a&gt; — &lt;a href=&quot;https://habrahabr.ru/company/ruvds/blog/348862/&quot;&gt;на русском&lt;/a&gt;) как замену &lt;code class=&quot;highlighter-rouge&quot;&gt;redux&lt;/code&gt; (или любого другого менеджера состояний), но это как сравнивать тёплое и мягкое. В действительности основная цель обновления контекста — взять на себя задачу по эффективному обновлению подписчиков (&lt;a href=&quot;https://twitter.com/dan_abramov/status/976486152197812229&quot;&gt;подробности&lt;/a&gt; от Дэна Абрамова), чтобы авторы библиотек могли сконцентрироваться на целевом функционале разрабатываемого пакета. Также обновлённый контекст предоставляет более удобный интерфейс для его использования.&lt;/p&gt;

&lt;p&gt;При этом можно отметить, что &lt;code class=&quot;highlighter-rouge&quot;&gt;redux&lt;/code&gt; имеет минимальное API для работы с состоянием: подписка и обновление, которое может быть заменено на использование &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; (и &lt;code class=&quot;highlighter-rouge&quot;&gt;setState&lt;/code&gt;) из обычного &lt;code class=&quot;highlighter-rouge&quot;&gt;React.Component&lt;/code&gt;. Поэтому правильнее сказать, что новый контекст в каких-то задачах можно использовать вместо &lt;code class=&quot;highlighter-rouge&quot;&gt;redux&lt;/code&gt;, подразумевая, что вместо него будет использоваться состояние и обновление &lt;code class=&quot;highlighter-rouge&quot;&gt;React.Component&lt;/code&gt;, а вместо &lt;code class=&quot;highlighter-rouge&quot;&gt;react-redux&lt;/code&gt; — &lt;code class=&quot;highlighter-rouge&quot;&gt;React.createContext&lt;/code&gt;. При этом “in box” замены &lt;code class=&quot;highlighter-rouge&quot;&gt;middleware&lt;/code&gt; из &lt;code class=&quot;highlighter-rouge&quot;&gt;redux&lt;/code&gt; с использованием контекста нет, в этом случае можно воспользоваться &lt;a href=&quot;https://github.com/didierfranc/react-waterfall#redux-devtools&quot;&gt;сторонними библиотеками&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;render-prop&quot;&gt;render-prop&lt;/h4&gt;

&lt;p&gt;Как можно заметить, новое API &lt;code class=&quot;highlighter-rouge&quot;&gt;React.createContext&lt;/code&gt; использует технику render-prop для связи с подписанными компонентами. Подробности реализации и примеры использования есть в &lt;a href=&quot;https://reactjs.org/docs/render-props.html&quot;&gt;официальной документации&lt;/a&gt;, мне же хотелось бы прояснить ключевые плюсы и минусы этого подхода:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(&lt;strong&gt;+&lt;/strong&gt;) Исключение коллизии имён при использовании нескольких подписок (&lt;code class=&quot;highlighter-rouge&quot;&gt;Consumer&lt;/code&gt;). Классические HOC осуществляют слияние &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;, и если у нас есть несколько HOC подряд, и у каких-то из них совпадают названия передаваемых параметров, то они будут перезатираться, и в конечном объекте &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;, который дойдёт до компонента, будет аргумент из последнего HOC. С render-prop эта проблема исчезает, т.к. с каждым передаваемым параметром подписки нужно работать индивидуально в передаваемой функции.&lt;/li&gt;
  &lt;li&gt;(&lt;strong&gt;-&lt;/strong&gt;) “Сallback hell” и пересоздание функций или необходимость выносить части render, т.е. отрисовку отображения, в отдельные методы (что нарушает консистентность шаблона). Подробности — в &lt;a href=&quot;https://reactjs.org/docs/render-props.html#be-careful-when-using-render-props-with-reactpurecomponent&quot;&gt;официальной документации&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Если вам не нравится подход render-prop, и вы хотите использовать «старые добрые» HOC — вот простой пример, как это можно сделать с мемоизацией:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateFromParent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cachedState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cachedComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updateFromParent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cachedState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowCompare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cachedState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;updateFromParent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cachedComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;updateFromParent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;cachedState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cachedComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Consumer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// example&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ComponentList.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComponentList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ComponentList_raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;unstable_observedbits&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unstable_observedBits&lt;/code&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;информация взята из &lt;a href=&quot;https://github.com/facebook/react/blob/4ccf58a94dce323718540b8185a32070ded6094b/packages/react/src/ReactContext.js#L18&quot;&gt;исходников&lt;/a&gt; и &lt;a href=&quot;https://github.com/facebook/react/blob/4ccf58a94dce323718540b8185a32070ded6094b/packages/react-reconciler/src/__tests__/ReactNewContext-test.internal.js#L498-L526&quot;&gt;тестов&lt;/a&gt; React, а также из &lt;a href=&quot;https://medium.com/@koba04/a-secret-parts-of-react-new-context-api-e9506a4578aa&quot;&gt;этой статьи&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Публично об этом ещё не заявляли, и в официальной документации информации об этой части API нет, но, помимо вышесказанного, у &lt;code class=&quot;highlighter-rouge&quot;&gt;React.createContext&lt;/code&gt; есть второй аргумент, принимающий функцию, а у &lt;code class=&quot;highlighter-rouge&quot;&gt;Consumer&lt;/code&gt; есть параметр &lt;code class=&quot;highlighter-rouge&quot;&gt;unstable_observedBits&lt;/code&gt;, принимающий битовую маску сопоставления. Это аналогично &lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate&lt;/code&gt; у &lt;code class=&quot;highlighter-rouge&quot;&gt;React.Component&lt;/code&gt;. Разберём подробнее.&lt;/p&gt;

&lt;h4 id=&quot;битовые-маски&quot;&gt;Битовые маски&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://ru.wikipedia.org/wiki/Битовая_маска&quot;&gt;Битовые маски&lt;/a&gt; применяются очень давно, в частности, для сопоставления прав доступа в Linux. Суть заключается в том, что каждый бит в своей очерёдности на битовой маске отвечает за &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; или &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; по отношению к определённому правилу. Удобность работы с побитовыми масками заключается в том, что для обновления значения достаточно осуществить побитовую операцию оригинальной маски с маской правила, в которой для установки значения в &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; необходимо применить “ИЛИ” — &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;, где управляющий бит === &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, а остальные — &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, а для установки значения в &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; необходимо применить “И” — &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;, где управляющий бит === &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, а остальные — &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;. Это может поначалу звучать сложно, но на практике это простой, наглядный, а главное, самый быстрый способ записи и управления диапазоном значений &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; \ &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;использование&quot;&gt;Использование&lt;/h4&gt;
&lt;p&gt;Битовая маска в описании и примерах ниже используется для отслеживания изменений в &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;. Каждому значению &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; должен соответствовать бит в битовой маске.&lt;/p&gt;

&lt;p&gt;Второй аргумент &lt;code class=&quot;highlighter-rouge&quot;&gt;React.createContext&lt;/code&gt; принимает функцию, которая на вход получает предыдущее и обновлённое состояние, а на выходе должна вернуть обновлённую битовую маску. В свою очередь &lt;code class=&quot;highlighter-rouge&quot;&gt;Consumer&lt;/code&gt; принимает в &lt;code class=&quot;highlighter-rouge&quot;&gt;unstable_observedBits&lt;/code&gt; битовую маску, которая содержит биты положительных значений, отвечающих за отслеживаемые позиции &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;. При поступлении изменений &lt;code class=&quot;highlighter-rouge&quot;&gt;Consumer&lt;/code&gt; сначала &lt;a href=&quot;https://github.com/facebook/react/blob/4ccf58a94dce323718540b8185a32070ded6094b/packages/react-reconciler/src/ReactFiberBeginWork.js#L988&quot;&gt;сравнивает&lt;/a&gt; обновлённую битовую маску с &lt;code class=&quot;highlighter-rouge&quot;&gt;unstable_observedBits&lt;/code&gt;, и если их побитовое сложение возвращает не &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, то render-prop будет вызван, иначе — нет. Если второй аргумент &lt;code class=&quot;highlighter-rouge&quot;&gt;React.createContext&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;unstable_observedBits&lt;/code&gt; у &lt;code class=&quot;highlighter-rouge&quot;&gt;Consumer&lt;/code&gt; не заданы — вызов render-prop будет происходить на любое изменение контекста.&lt;/p&gt;

&lt;h4 id=&quot;пример&quot;&gt;Пример&lt;/h4&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;observedBits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;0b01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;0b10&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StoreContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// поменялся `foo`&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observedBits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// поменялся `bar`&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observedBits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;StoreContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Consumer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unstable_observedBits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observedBits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// если поменяется `bar`, этот код не выполнится&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo = {foo}&quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/StoreContext.Consumer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Как ясно из названия параметров, данное API ещё не стабильно и не стоит использовать его в проде.&lt;/p&gt;

&lt;h3 id=&quot;create-subscription&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;create-subscription&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Также в &lt;a href=&quot;https://github.com/facebook/react/tree/master/packages/create-subscription&quot;&gt;исходных кодах&lt;/a&gt; React появился пакет &lt;a href=&quot;https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#adding-event-listeners-or-subscriptions&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;create-subscription&lt;/code&gt;&lt;/a&gt;. Раньше для того, чтобы подписаться и как-то реагировать на внешние изменения и производить ререндер компонентов, необходимо было делать обёртку в виде класса &lt;code class=&quot;highlighter-rouge&quot;&gt;React.Component&lt;/code&gt;, в которой при поступлении уведомлений вызывать &lt;code class=&quot;highlighter-rouge&quot;&gt;setState&lt;/code&gt; — т.е. дублировать данные из пришедшего уведомления — или &lt;a href=&quot;https://reactjs.org/docs/react-component.html#forceupdate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;forceUpdate&lt;/code&gt;&lt;/a&gt; — чего лучше избегать. Для упрощения подписки теперь можно использовать более прозрачное API &lt;code class=&quot;highlighter-rouge&quot;&gt;createSubscription&lt;/code&gt; из пакета &lt;code class=&quot;highlighter-rouge&quot;&gt;create-subscription&lt;/code&gt; официального репозитория React.&lt;/p&gt;

&lt;h3 id=&quot;резюмируя&quot;&gt;Резюмируя&lt;/h3&gt;
&lt;p&gt;Обновление React 16.3 принесло множество интересных изменений и, безусловно, облегчит и повысит качество использования React и разработку вспомогательных библиотек для него. Все вышеописанные технологии можно посмотреть в интерактивной демонстрации:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codesandbox.io/s/2onvlynj1r&quot;&gt;&lt;img src=&quot;https://codesandbox.io/static/img/play-codesandbox.svg&quot; alt=&quot;demo&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Apr 2018 00:00:00 +0000</pubDate>
        <link>/2018/04/06/new-react-context</link>
        <guid isPermaLink="true">/2018/04/06/new-react-context</guid>
      </item>
    
      <item>
        <title>CSSSR Garbage Collector #33</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/share/cgc-cover-33.jpg&quot; alt=&quot;CSSSR Garbage Collector&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@almeynman/setup-vue-with-storybook-using-vue-cli-3-0-typescript-example-1be64a7cc7ac&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; Setup Vue with Storybook using Vue CLI&lt;/a&gt; — в этой небольшой статье наш товарищ &lt;a href=&quot;https://twitter.com/almeynman&quot;&gt;Алмас&lt;/a&gt; рассказывает, как собрать комбо из трёх технологий: vue, storybook, typescript, — и заставить всё это работать&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://runkit.com/home&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Runkit&lt;/a&gt; — ещё один классный инструмент для прототипирования ваших идей&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ilyabirman.ru/meanwhile/all/thinner-than-a-pixel/&quot;&gt;Тоньше пикселя&lt;/a&gt; — небольшая заметка Ильи Бирмана о том, как получить линию тоньше пикселя. Минус одна причина жаловаться на дизайнеров :)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codersblock.com/blog/say-hello-to-houdini-and-the-css-paint-api/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Say hello to Houdini and the CSS paint API&lt;/a&gt; — обзорная статья возможностей новой технологии под названием Houdini, которая, как мы все надеемся, скоро появится в браузерах. Вы уже можете поиграться с ней в Chrome, и это ОЧЕНЬ круто!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codeburst.io/how-to-make-a-simple-multiplayer-online-car-game-with-javascript-89d47908f995&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; How To Make a Simple Multiplayer Online Car Game with JavaScript&lt;/a&gt; — для тех, кто всегда мучился с поиском танка в GTA2 или всё детство мечтал о гоночках с машинками из Hot Wheels. Создайте свой автосимулятор на JS, и пусть ничто вас больше не ограничивает!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tympanus.net/codrops/2017/12/21/css-glitch-effect/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; CSS Glitch Effect&lt;/a&gt; — любите glitch-анимации и CSS? Тогда позвольте вас порадовать ;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://refactoring.guru/ru/design-patterns/catalog&quot;&gt;Каталог паттернов проектирования&lt;/a&gt; — доброе-вечное в схемках и таблицах с енотами и крутыми иллюстрациями&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://reallygoodemails.com/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Really Good Emails&lt;/a&gt; — для несчастных или, наоборот, очень счастливых верстальщиков рассылок&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/appsflyer/10-tips-for-javascript-debugging-like-a-pro-with-console-7140027eb5f6&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; 10 Tips for Javascript Debugging Like a PRO with Console&lt;/a&gt; — классная статья о малоизвестных методах &lt;code class=&quot;highlighter-rouge&quot;&gt;console&lt;/code&gt; и случаях, когда они могут пригодиться&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 14 Mar 2018 00:00:00 +0000</pubDate>
        <link>/2018/03/14/cgc-33</link>
        <guid isPermaLink="true">/2018/03/14/cgc-33</guid>
      </item>
    
      <item>
        <title>CSSSR Garbage Collector #32</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/share/cgc-cover-32.jpg&quot; alt=&quot;CSSSR Garbage Collector&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Наш и без того трудолюбивый и просто замечательный комрад &lt;a href=&quot;https://github.com/kosmogradsky&quot;&gt;Женя&lt;/a&gt; был пронзён стрелой творчества. Итог — Medium пополнился тремя отличными статьями по основам управления реактивными данными в Angular:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://medium.com/@kosmogradsky/observable-%D0%B2-rxjs-%D0%BA%D1%80%D0%B0%D1%82%D0%BA%D0%BE%D0%B5-%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-34939ff5f7d7&quot;&gt;&lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; Observable в RxJS: краткое введение&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://medium.com/@kosmogradsky/subject-%D0%B2-rxjs-%D0%BA%D1%80%D0%B0%D1%82%D0%BA%D0%BE%D0%B5-%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-c9099231be6d&quot;&gt;&lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; Subject в RxJS: краткое введение&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://medium.com/@kosmogradsky/%D1%81%D0%BB%D1%83%D0%B6%D0%B1%D1%8B-%D0%BF%D0%BE%D1%82%D0%BE%D0%BA%D0%BE-%D0%B7%D1%80%D0%B5%D0%BB%D0%B8%D1%89%D0%BD%D1%8B%D1%85-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-%D0%B2-angular-5960fd3d83c7&quot;&gt;&lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; Службы потоко-зрелищных данных в Angular&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tproger.ru/translations/quantum-computer-programming/&quot;&gt;Учимся программировать квантовый компьютер на основе игры «Морской бой»&lt;/a&gt; — «Как это мимо? Я же прямо в тебя стрелял!»&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://shift.infinite.red/redux-observable-epics-vs-redux-sagas-8e53610c0eda&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Redux-Observable Epics vs Redux-Sagas&lt;/a&gt; — да начнётся холивар!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://habrahabr.ru/company/oleg-bunin/blog/350252/&quot;&gt;Разработка Rich Text Editor: проблемы и решения&lt;/a&gt; — если вам не хватает сложностей и боли в жизни, попробуйте сделать свой редактор текста в вебе&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://beta.observablehq.com/&quot;&gt;Observable&lt;/a&gt; — «живой» и очень крутой редактор, который понимает JS и в котором удобно создавать графику на канвасе&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@frontman/%D1%81%D0%BB%D1%83%D1%87%D0%B0%D0%B9%D0%BD%D1%8B%D0%B5-%D1%87%D0%B8%D1%81%D0%BB%D0%B0-%D0%BD%D0%B5-%D1%81%D0%BB%D1%83%D1%87%D0%B0%D0%B9%D0%BD%D1%8B-252e08e60828&quot;&gt;&lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; Случайные числа не случайны&lt;/a&gt; — как создать генератор случайных чисел на JS&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://firebase.google.com/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Firebase&lt;/a&gt; — если вам нужно развернуть небольшое мобильное приложение «без регистрации и смс» с хостингом, бэкендом в реальном времени, облачными функциями и авторизацией&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://compsciclub.ru/courses/Glasgow-Haskell-Compiler/2018-spring/classes/&quot;&gt;Компилятор GHC языка Haskell: теория языков программирования в работе&lt;/a&gt; — в конце марта в Питере В. Н. Брагилевский будет рассказывать о структуре компилятора GHC, не пропустите&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://habrahabr.ru/post/350018/&quot;&gt;Возможно, вам не нужен Rust, чтобы ускорить ваш JS&lt;/a&gt; — исследование о том, почему иногда достаточно уделить чуть больше внимания алгоритмам, а не переписывать приложение на другой, более «быстрый» язык&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gitbook.com/book/frontendmasters/front-end-developer-handbook-2018/details&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Front-End Developer Handbook 2018&lt;/a&gt; — как же в новом году без свежего гайда по фронтенду :)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kamranahmedse/developer-roadmap&quot;&gt;&lt;img src=&quot;/images/icons/github.png&quot; alt=&quot;github&quot; /&gt; Web developer roadmap 2018&lt;/a&gt; — в дополнение к предыдущей ссылке: путеводитель по фронтенду, представленный в виде простой и удобной диаграммы&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://philipwalton.com/articles/responsive-components-a-solution-to-the-container-queries-problem/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; The solution to the Container Queries problem&lt;/a&gt; — Container Queries появятся ещё не скоро, а уже хочется менять стили в зависимости от размеров контейнера? Есть решение — браузерный API &lt;code class=&quot;highlighter-rouge&quot;&gt;ResizeObserver&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 07 Mar 2018 00:00:00 +0000</pubDate>
        <link>/2018/03/07/cgc-32</link>
        <guid isPermaLink="true">/2018/03/07/cgc-32</guid>
      </item>
    
      <item>
        <title>CSSSR Garbage Collector #31</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/share/cgc-cover-31.jpg&quot; alt=&quot;CSSSR Garbage Collector&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mattzeunert.com/2018/01/25/v8-javascript-memory-quiz.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; V8 Quiz ;)&lt;/a&gt; — пройди тест и погрузись в тайны V8&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mocoding-software/redux-automata&quot;&gt;&lt;img src=&quot;/images/icons/github.png&quot; alt=&quot;github&quot; /&gt; Руки чешутся попробовать&lt;/a&gt; — генерируем редьюсеры&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/webpack/webpack/releases/tag/v4.0.0&quot;&gt;&lt;img src=&quot;/images/icons/github.png&quot; alt=&quot;github&quot; /&gt; Webpack 4 вылупился&lt;/a&gt; — количество жертв и преждевременно обновившихся проектов пока не сообщается&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://habrahabr.ru/company/cloud4y/blog/349826/&quot;&gt;Классные мелочи для лучшего UI и UX&lt;/a&gt; — советы от Cloud4Y&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@asandholm/announcing-dart-2-80ba01f43b6&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; Google тут Dart 2 выпустил&lt;/a&gt; — перезагрузка, посмотрим, что получилось на этот раз&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://habrahabr.ru/company/jugru/blog/349630/&quot;&gt;Б — безопасность&lt;/a&gt; — об уязвимостях приложений, методах обнаружения и защиты&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=LmG1KxKcevE&amp;amp;t=24992s&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; Доклад на русском про Houdini — будущее CSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=j4_9BZezSUA&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; Джейк Арчибальд про event loop&lt;/a&gt; — потому что повторение — мать учения&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 28 Feb 2018 00:00:00 +0000</pubDate>
        <link>/2018/02/28/cgc-31</link>
        <guid isPermaLink="true">/2018/02/28/cgc-31</guid>
      </item>
    
      <item>
        <title>CSSSR Garbage Collector #30</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/share/cgc-cover-30.jpg&quot; alt=&quot;CSSSR Garbage Collector&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bogdan-lyashenko.github.io/Under-the-hood-ReactJS/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Under the hood: React&lt;/a&gt; — если вам всегда было интересно узнать, как работает React от начала до конца, и представить это в виде одной большой диаграммы, то вот вам ссылка, не благодарите 😉&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scrimba.com/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Scrimba&lt;/a&gt; — очень классный ресурс, на котором можно смотреть интерактивные (!) скринкасты&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://randycoulman.com/blog/2016/07/12/thinking-in-ramda-lenses/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Thinking in Ramda: Lenses&lt;/a&gt; — статья про линзы в Ramda&lt;/li&gt;
  &lt;li&gt;И, пользуясь случаем, напоминаем, что и у нас есть своя хорошая статья про линзы — &lt;a href=&quot;http://blog.csssr.ru/2016/07/08/lenses/&quot;&gt;Использование линз на реальных примерах&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Несколько статей о концепции атомарного дизайна:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://atomicdesign.bradfrost.com/chapter-2/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Atomic Design Methodology&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://medium.com/@yejodido/atomic-components-managing-dynamic-react-components-using-atomic-design-part-1-5f07451f261f&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; &lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; Managing Dynamic React Components using Atomic Design&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://about.futurelearn.com/blog/atomic-design-molecules-organisms&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Making sense of atomic design: molecules and organisms&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://arc.js.org/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; ARc&lt;/a&gt; — в дополнение к материалам выше — стартовый бандл для React–приложений, основанный на идеологии атомарного дизайна&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://habrahabr.ru/company/ruvds/blog/349080/&quot;&gt;Rekit Studio: IDE для React-приложений&lt;/a&gt; — статья об интересной IDE, созданной специально для проектов на React &lt;code class=&quot;highlighter-rouge&quot;&gt;перевод&lt;/code&gt; (&lt;a href=&quot;https://medium.freecodecamp.org/introducing-rekit-studio-a-real-ide-for-react-and-redux-development-baf0c99cb542&quot;&gt;&lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; оригинал&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=xAKnPtbfNfY&amp;amp;list=PLg-UKERBljNy2Yem3RJkYL1V70dpzkysC&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; UX How-To with Luke Wroblewski&lt;/a&gt; — плейлист, из которого вы можете узнать о правильных UX-паттернах&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 21 Feb 2018 00:00:00 +0000</pubDate>
        <link>/2018/02/21/cgc-30</link>
        <guid isPermaLink="true">/2018/02/21/cgc-30</guid>
      </item>
    
      <item>
        <title>CSSSR Garbage Collector #29</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/share/cgc-cover-29.jpg&quot; alt=&quot;CSSSR Garbage Collector&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=HPFARivHJRY&amp;amp;feature=youtu.be&amp;amp;list=LLAKtelC0m6GfyYcLVcujTvg&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; Производительность JavaScript через подзорную трубу&lt;/a&gt; — доклад Вячеслава Егорова с HolyJS 2016 года&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dmitrysoshnikov.com/ecmascript/ru-javascript-the-core/&quot;&gt;JavaScript. Ядро.&lt;/a&gt; — хорошая статья про внутренности JS&lt;/li&gt;
  &lt;li&gt;Если интересно узнать, как работает change detection в Angular:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Angular change detection explained&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.angularindepth.com/everything-you-need-to-know-about-change-detection-in-angular-8006c51d206f&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Everything you need to know about change detection in Angular&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/webpack/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Серия статей&lt;/a&gt; по оптимизации приложений, которые собираются с помощью webpack&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackernoon.com/announcing-codesandbox-2-5-be767d15ffd&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; CodeSandbox 2.5&lt;/a&gt; — сильно обновлённый, много крутых плюх. Но будьте аккуратны, одна только статья съедает 627 Мб ОЗУ…&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 14 Feb 2018 00:00:00 +0000</pubDate>
        <link>/2018/02/14/cgc-29</link>
        <guid isPermaLink="true">/2018/02/14/cgc-29</guid>
      </item>
    
      <item>
        <title>CSSSR Garbage Collector #28</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/share/cgc-cover-28.jpg&quot; alt=&quot;CSSSR Garbage Collector&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Наш комрад рассказал о том, что сделал за неделю в большом проекте на Angular. Давайте вместе с ним &lt;a href=&quot;https://www.youtube.com/watch?v=_09goML2viI&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; изучим rxjs observable, rx store, redux в Angular&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Курс &lt;a href=&quot;https://egghead.io/courses/introduction-to-reactive-programming&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Introduction to Reactive Programming&lt;/a&gt; на &lt;a href=&quot;https://egghead.io&quot;&gt;egghead&lt;/a&gt;, который поможет вам разобраться в стримах&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=YXo4YOLDK1k&amp;amp;feature=youtu.be&amp;amp;list=PLGP3VO5jDf8xpaeBAhJOJaEjt1C7sE5Sf&amp;amp;t=1629&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; 5 architectures of asynchronous JavaScript&lt;/a&gt; — видео с конференции Nordic.js 2017, благодаря которому буквально за 10 минут можно понять, что такое стримы и с чем их едят (с 27 минуты)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QfvwQEJVOig&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Angular Playground V3, Theory of RxJS, Packaging Angular Libraries&lt;/a&gt; — cвежий митап по Angular. Обязательно посмотрите первые 2 доклада: в первом знакомят с аналогом Storybook под Angular, во втором рассказывают о паттерне Observable и дают советы, как использовать RxJS в Angular&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=qZaby7iOVts&amp;amp;feature=youtu.be&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; AsyncDom&lt;/a&gt; — доклад с PiterJS#21 об асинхронной работе с DOM от Александра Канунникова — наверное, самого топящего за Ember человека в России&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate>
        <link>/2018/02/07/cgc-28</link>
        <guid isPermaLink="true">/2018/02/07/cgc-28</guid>
      </item>
    
      <item>
        <title>CSSSR Garbage Collector #27</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/share/cgc-cover-27.jpg&quot; alt=&quot;CSSSR Garbage Collector&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Сдули пыль с клуба. Наши комрады &lt;a href=&quot;https://www.youtube.com/watch?v=Mu5gSnRZuEE&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; пробежались по Angular и начали его изучать&lt;/a&gt;. За полтора часа разобрали 70% того, что пригождается наиболее часто&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://habrahabr.ru/company/ods/blog/344044/&quot;&gt;Материалы открытого курса OpenDataScience и Mail.Ru Group по машинному обучению&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bespoyasov.ru/front-not-pain/&quot;&gt;Фронтенд — это не больно!&lt;/a&gt; — пособие для разработчиков и сочувствующих&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/webpack/webpack-4-beta-try-it-today-6b1d27d7d7e2&quot;&gt;&lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Webpack 4 beta — try it today!&lt;/a&gt; — состоялся релиз бета-версии Webpack 4&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://air.ghost.io/js-things-i-never-knew-existed/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; JS things I never knew existed&lt;/a&gt; — несколько интересных фич JavaScript, о которых мало кто знает&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://habrahabr.ru/company/spice/blog/347636/&quot;&gt;ITренировка #8&lt;/a&gt; — актуальные вопросы и задачи от ведущих компаний&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ol4OVMJZC1w&amp;amp;list=PLDyvV36pndZEz2unvD0a2Spv7RehBrpDO&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; Основы React.JS&lt;/a&gt; — видеокурс от ребят из JavaScript.ru&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate>
        <link>/2018/01/31/cgc-27</link>
        <guid isPermaLink="true">/2018/01/31/cgc-27</guid>
      </item>
    
      <item>
        <title>CSSSR Garbage Collector #26</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/share/cgc-cover-26.jpg&quot; alt=&quot;CSSSR Garbage Collector&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;На Хабрахабре вышла &lt;a href=&quot;https://habrahabr.ru/post/346926/!&quot;&gt;статья&lt;/a&gt; про наш open source проект &lt;a href=&quot;https://rispa.io/&quot;&gt;Rispa&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codeburst.io/javascript-can-a-1-a-2-a-3-ever-evaluate-to-true-aca13ff4462d&quot;&gt;&lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; JavaScript: Can (a==1 &amp;amp;&amp;amp; a==2 &amp;amp;&amp;amp; a==3) ever evaluate to true?&lt;/a&gt; — очередные странности JavaScript, за которые мы все его любим  ❤️&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bEWLTQYIcYE&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; Поговорим о наших младших товарищах&lt;/a&gt; — доклад Сергея Попова о проблемах начинающих специалистов и о том, как мы можем им помочь&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.javascriptjanuary.com/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Статьи о JS&lt;/a&gt; на каждый день, есть много интересных&lt;/li&gt;
  &lt;li&gt;Произошел релиз &lt;a href=&quot;https://blog.getbootstrap.com/2018/01/18/bootstrap-4/&quot;&gt;Bootstrap 4.0&lt;/a&gt;! Всего-то 2,5 года от первой альфы прошло&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 24 Jan 2018 00:00:00 +0000</pubDate>
        <link>/2018/01/24/cgc-26</link>
        <guid isPermaLink="true">/2018/01/24/cgc-26</guid>
      </item>
    
      <item>
        <title>CSSSR Garbage Collector #25</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/share/cgc-cover-25.jpg&quot; alt=&quot;CSSSR Garbage Collector&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/NervJS/nerv&quot;&gt;NervJS&lt;/a&gt; — ребята сделали свой реакт с аналогичным API, поддержкой IE8, редаксом и заявляют, что он работает быстрее оригинала!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5&quot;&gt;&lt;img src=&quot;/images/icons/medium.png&quot; alt=&quot;medium&quot; /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; Как легко красть пароли и номера кредитных карт с помощью npm пакетов&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vasily.polovnyov.ru/posts/poodr-1.html&quot;&gt;Статья&lt;/a&gt; об ошибочном понимании ООП&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=b-Eq4YV4uwc&amp;amp;t=2s&quot;&gt;&lt;img src=&quot;/images/icons/youtube.png&quot; alt=&quot;yt&quot; /&gt; Полный стэк на «одном» языке, или Изоморфизм Рича Хикки&lt;/a&gt; — о простоте (simple) разработки, которая приводит к лёгкости (easy) разработки&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devconf.ru/ru/offers/328&quot;&gt;Ментальное программирование 2.0&lt;/a&gt; — также продвигает идею «Simple made easy»&lt;/li&gt;
  &lt;li&gt;Не связано с программированием, но не можем не поделиться с вами &lt;a href=&quot;https://apod.nasa.gov/apod/archivepix.html&quot;&gt;архивом NASA&lt;/a&gt;: 95 «фото дня» с 95 года до сегодняшнего. Какая красота!&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate>
        <link>/2018/01/17/cgc-25</link>
        <guid isPermaLink="true">/2018/01/17/cgc-25</guid>
      </item>
    
  </channel>
</rss>
